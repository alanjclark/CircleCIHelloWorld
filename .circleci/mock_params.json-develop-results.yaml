



version: 2.1

build_golang_context: &build_golang_context
  # shared context for all golang builds
  - BuildContext
  - deploy_key_ops
  - deploy_key_private_forks
  - SlackDynamoCtx
  - wiz-cache-prod

build_node_context: &build_node_context
  - BuildContext
  - deploy_key_ops
  - deploy_key_private_forks
  - deploy_key_docs
  - crowdin_token
  - wiz-cache-prod

orbs:
  wiztools: wiz-sec/wiztools@0.2.7
  aws-cli:
    # Trying to fold 3 runs into one to save lines in compiled configuration
    commands:
      configure:
        parameters:
          aws-region:
            description: |
              Env var of AWS region to operate in (defaults to AWS_DEFAULT_REGION)
            type: env_var_name
            default: AWS_DEFAULT_REGION
          profile-name:
            description: Profile name to be configured.
            type: string
            default: default
        steps:
          - run:
              name: Configure AWS
              command: |
                export A_REGION=$<< parameters.aws-region >>
                bash .circleci/scripts/aws-config.sh
  wiz-slack:
    commands:
      notify:
        description: Send Slack notification
        parameters:
          slack_channels:
            type: string
            default: test-slack
          notify_on:
            default: fail
            description: |
              In what event should this message send? Options: ["fail", "success", "always"]
            enum:
            - fail
            - success
            - always
            - never
            type: enum
          enable_slack_mention:
            default: true
            description: Determines whether to mention authors on Slack
            type: boolean
          artifacts_buttons_json:
            default: '[]'
            type: string
            description: |
              json list of objects with "button_text" and "artifact_path" fields
          custom_text:
            default: '""'
            type: string
            description: |
              custom text body of the Slack message
          hide_author:
            default: false
            type: boolean
            description: |
              enable this to hide commit author information in the slack message body
        steps:
        - run:
            command: |
              echo 'fail' > /tmp/SLACK_JOB_STATUS
            name: Slack - Detecting Job Status (FAIL)
            when: on_fail
        - run:
            command: |
              echo 'success' > /tmp/SLACK_JOB_STATUS
            name: Slack - Detecting Job Status (PASS)
            when: on_success
        - restore_cache:
            keys:
            - slack_libs_python_v1
        - run:
            name: install slack message script libs
            when: always
            command: |
              mkdir -p $PIP_CACHE_DIR
              pip3 install boto3==1.24.8 slack_sdk==3.19.1
            environment:
              PIP_CACHE_DIR: /tmp/pip_cache
        - save_cache:
            key: slack_libs_python_v1
            paths:
            - /tmp/pip_cache
        - run:
            name: Send slack notification
            when: always
            environment:
              ARTIFACTS_JSON: << parameters.artifacts_buttons_json >>
            command: |
              cd .circleci/scripts
              python3 slack_notifier.py \
                --send_when=<< parameters.notify_on >> \
                --enable_slack_mention=<< parameters.enable_slack_mention >> \
                --status=$(cat /tmp/SLACK_JOB_STATUS) \
                --commit=${CIRCLE_SHA1} \
                --repo=wiz \
                --branch=${CIRCLE_BRANCH} \
                --build_number=${CIRCLE_BUILD_NUM} \
                --job_link=https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID} \
                --build_link=${CIRCLE_BUILD_URL:="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"} \
                --slack_channels=<< parameters.slack_channels >> \
                --custom_text="<< parameters.custom_text >>" \
                --hide_author=<< parameters.hide_author >>

type_bool_false: &type_bool_false
  type: boolean
  default: false

type_bool_true: &type_bool_true
  type: boolean
  default: true

type_bool: &type_bool
  type: boolean

type_str: &type_str
  type: string

type_str_empty: &type_str_empty
  type: string
  default: ""

parameters:
  gocache_key:
    description: global key for all remote S3 gocache usage
    default: go/v1
    type: string
  run_trigger_workflow: *type_bool_true
  initial_map:
    type: string
    default: ''
  trigger:
    type: string
    default: ''
  validate: *type_bool_false
  validate-nativetypes: *type_bool_false
  validate-component-registration: *type_bool_false
  validate-sql-migrations: *type_bool_false
  buildlibs: *type_bool_false
  datascanlib: *type_bool_false
  diskanalyzerlib: *type_bool_false
  wiz_ci_tag:
    default: 5037065-main-multiarch
    type: string
  golang_python_tag:
    default: latest-79b4b6f180e0c250b3db478aa193acfb1117a1d5-amd64
    type: string
  wiz_ci_node_tag:
    default: 71c160e-71c160e6e0df9396e8219696cc3c6116d12a1b79-amd64
    type: string
  wiz_cypress_tag:
    default: 3958fb7-main-multiarch
    type: string
  janusgraph_tag:
    default: 1dcc22a-multiarch
    type: string
  postgresql_tag:
    default: ut-14
    type: string
  reset_integration_envs:
    type: boolean
    default: false
  integration_env:
    type: string
    default: ''
  # Scheduled parameters
  trigger-update-chromium-version: *type_bool_false
  trigger-update-geoip-db: *type_bool_false
  trigger-update-fim-data: *type_bool_false
  trigger-update-wiz-ci-tag: *type_bool_false
  sync-build-all: *type_bool_false
  # A parameter per package
  api-gateway: *type_bool_false
  browser-extension: *type_bool_false
  web: *type_bool_false
  web-only: *type_bool_false
  connector-dal: *type_bool_false
  service-registry: *type_bool_false
  control-engine: *type_bool_false
  control-engine-operator: *type_bool_false
  cloudplatform-dal: *type_bool_false
  backoffice-dal: *type_bool_false
  backoffice-request-dal: *type_bool_false
  backoffice-users-dal: *type_bool_false
  backoffice-ingestor: *type_bool_false
  benchmark-dal: *type_bool_false
  report-dal: *type_bool_false
  policy-dal: *type_bool_false
  report-run-executor: *type_bool_false
  report-operator: *type_bool_false
  report-generator: *type_bool_false
  changeset-ingestor: *type_bool_false
  cloudplatform-fetcher: *type_bool_false
  tenant-dal: *type_bool_false
  tenant-deleter: *type_bool_false
  tenant-migrator: *type_bool_false
  objectstore-deleteunseen: *type_bool_false
  objectstore-operator: *type_bool_false
  tenant-operator: *type_bool_false
  outpost-operator: *type_bool_false
  outpost-state-dal: *type_bool_false
  outpost-flagsyncer: *type_bool_false
  outpost-statesyncer: *type_bool_false
  packageregistry-dal: *type_bool_false
  packageregistry-fetcher: *type_bool_false
  edr-fetcher: *type_bool_false
  product-dal: *type_bool_false
  fedramp-graphql-blocker: *type_bool_false
  builtins-updater: *type_bool_false
  workload-dal: *type_bool_false
  sbom-dal: *type_bool_false
  sbom-generator: *type_bool_false
  libraryinfo-dal: *type_bool_false
  forensic-dal: *type_bool_false
  forensic-ingestor: *type_bool_false
  forensic-cron: *type_bool_false
  forensic-correlator: *type_bool_false
  rto-manager: *type_bool_false
  userdirectory-dal: *type_bool_false
  userdirectory-dal-migrator: *type_bool_false
  accelerator-sync: *type_bool_false
  image-verifier: *type_bool_false
  auth: *type_bool_false
  auth0-fetcher: *type_bool_false
  graph-ingestor: *type_bool_false
  graph-gc: *type_bool_false
  issues-ingestor: *type_bool_false
  object-ingestor: *type_bool_false
  user-dal: *type_bool_false
  portal-dal: *type_bool_false
  notification-dal: *type_bool_false
  notification-ingestor: *type_bool_false
  techstack-dal: *type_bool_false
  versioncontrol-fetcher: *type_bool_false
  okta-fetcher: *type_bool_false
  versioncontrol-dal: *type_bool_false
  vulnerabilities-engine: *type_bool_false
  vminsight-ingestor: *type_bool_false
  securitytool-dal: *type_bool_false
  graph-dal: *type_bool_false
  utils: *type_bool_false
  utils-backup: *type_bool_false
  datascan-diskdb-engines: *type_bool_false
  ops-accessbot: *type_bool_false
  ops-vmsbot: *type_bool_false
  ops-oncallbot: *type_bool_false
  ops-vulnsbot: *type_bool_false
  ops-dispatcher: *type_bool_false
  ops-image-replicator: *type_bool_false
  ops-registerbot: *type_bool_false
  ops-freezebot: *type_bool_false
  ops-rdebot: *type_bool_false
  ops-releasebot: *type_bool_false
  graph-enricher: *type_bool_false
  fileupload-dal: *type_bool_false
  securitytool-parser: *type_bool_false
  diskanalyzer: *type_bool_false
  bucketanalyzer: *type_bool_false
  dbanalyzer: *type_bool_false
  serverlessanalyzer: *type_bool_false
  diskanalyzer-init-pull-image: *type_bool_false
  diskanalyzer-coordinator: *type_bool_false
  diskanalyzer-provisioner: *type_bool_false
  diskanalyzer-provisioner-aws: *type_bool_false
  diskanalyzer-provisioner-azure: *type_bool_false
  diskanalyzer-provisioner-alibaba: *type_bool_false
  diskanalyzer-provisioner-dal: *type_bool_false
  diskanalyzer-provisioner-dal-migrator: *type_bool_false
  diskanalyzer-provisioner-gcp: *type_bool_false
  diskanalyzer-provisioner-oci: *type_bool_false
  diskanalyzer-provisioner-helm: *type_bool_false
  diskanalyzer-provisioner-bootstrap: *type_bool_false
  diskanalyzer-operator: *type_bool_false
  diskanalyzer-staticdata-syncer: *type_bool_false
  diskanalyzerlib-applet-dotnet-dependencies-extractor: *type_bool_false
  scansource-operator: *type_bool_false
  diskanalyzer-scan-results-replay: *type_bool_false
  diskanalyzer-results-forwarder: *type_bool_false
  outpost-files-csi-driver: *type_bool_false
  nbd-csi-driver: *type_bool_false
  diskanalyzer-scanbroker: *type_bool_false
  log-http-relayer: *type_bool_false
  cspm-matcher: *type_bool_false
  tunnel-auth: *type_bool_false
  tunnel-server: *type_bool_false
  iac-dal: *type_bool_false
  iac-dal-migrator: *type_bool_false
  secrets-dal: *type_bool_false
  secrets-dal-migrator: *type_bool_false
  agent-gateway: *type_bool_false
  audit-dal: *type_bool_false
  audit-ingestor: *type_bool_false
  connector-operator: *type_bool_false
  enricher-dal: *type_bool_false
  enricher-operator: *type_bool_false
  enrichment-dal: *type_bool_false
  cspm-dal: *type_bool_false
  fetcher-triggers-dal: *type_bool_false
  cspmlib: *type_bool_false
  cli-dal: *type_bool_false
  cli: *type_bool_false
  hashcracker-ingestor: *type_bool_false
  fim-ingestor: *type_bool_false
  fim-updater: *type_bool_false
  forensicspackage-ingestor: *type_bool_false
  forensicspackage-dal: *type_bool_false
  forensicspackage-auth-serverless: *type_bool_false
  end2endtests: *type_bool_false
  sandboxed-opa-runner: *type_bool_false
  filereputation: *type_bool_false
  filereputation-manager: *type_bool_false
  fetcher-dal: *type_bool_false
  tenant-monitor: *type_bool_false
  tenant-usagemetrics: *type_bool_false
  gqlgen: *type_bool_false
  gqlgen-schema: *type_bool_false
  gqlgen-backoffice: *type_bool_false
  proto: *type_bool_false
  iac-rego-lib: *type_bool_false
  securityinsight-dal: *type_bool_false
  artifact-dal: *type_bool_false
  artifact-fetcher: *type_bool_false
  artifact-scan-ingestor: *type_bool_false
  netscanner-coordinator: *type_bool_false
  netscanner-results-ingestor: *type_bool_false
  netscanner-serverless: *type_bool_false
  netscanner-screenshot: *type_bool_false
  securityinsight-dal-migrator: *type_bool_false
  postgres-updater: *type_bool_false
  auth-pretoken: *type_bool_false
  auth-msg: *type_bool_false
  datascan-dal: *type_bool_false
  datascan-dal-migrator: *type_bool_false
  host-configuration-dal: *type_bool_false
  validate-code: *type_bool_false
  admission-controller-dal: *type_bool_false
  admission-controller-ingestor: *type_bool_false
  sensor-dal: *type_bool_false
  sensor-dal-provisioner: *type_bool_false
  sensor-rules-converter: *type_bool_false
  sensor-ingestor: *type_bool_false
  sensor-definitions: *type_bool_false
  resourcescanner-dal: *type_bool_false
  resourcescanner-ingestor: *type_bool_false
  outpost-diagnostics: *type_bool_false
  digital-trust-serverless: *type_bool_false
  digital-trust-dal: *type_bool_false
  digital-trust-web: *type_bool_false
  remediation-dal: *type_bool_false
  deployment-ingestor: *type_bool_false
  wiz-admission-controller: *type_bool_false
  wiz-broker: *type_bool_false
  broker-dal: *type_bool_false
  xml-language-server: *type_bool_false
  webhook-gateway: *type_bool_false
  codeanalyzer: *type_bool_false
  codeanalyzer-manager: *type_bool_false
  iam-dal: *type_bool_false
  ai-dal: *type_bool_false
  netreputation: *type_bool_false
  remediation-ingestor: *type_bool_false
  circleci: *type_bool_false
  build-all-golang: *type_bool_false
  skip-ops-sync: *type_bool_false
  sync-components-to-ops: *type_bool_false
  staticdata_exporter: *type_bool_false
  tslibs: *type_bool_false
  build-all: *type_bool_false
  validate-builtin-roles: *type_bool_false
  service-catalog-dal: *type_bool_false
  finops-dal: *type_bool_false
  finops-ingestor: *type_bool_false
executors:
  node:
    parameters:
      ecr_url: &ecr_url_param
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
      resource_class:
        type: string
        default: large
    docker: &node-docker-image
    - image: << parameters.ecr_url >>/external/wiz-ci-node:<< pipeline.parameters.wiz_ci_node_tag >>
    environment:
      NODE_OPTIONS: --max-old-space-size=6144
    resource_class: << parameters.resource_class >>

  node-runner:
    parameters:
      ecr_url: *ecr_url_param
      size: &size_param
        type: string
        default: medium
    docker: *node-docker-image
    resource_class: wiz-sec/wiz-ci-node-<< parameters.size >>
# GOLANG EXECUTORS BEGIN

  golang-docker-amd64-basic:
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
    resource_class: << parameters.size >>
    docker: &golang_docker_basic_config
    - &wiz_ci_image
      image: << parameters.ecr_url >>/external/wiz-ci:<< pipeline.parameters.wiz_ci_tag >>
      environment:
        BUILDKIT_PROGRESS: plain
        DOCKER_BUILDKIT: 1
    - &pg_image
      image: << parameters.ecr_url >>/postgresql:<< pipeline.parameters.postgresql_tag >>
      environment:
        POSTGRES_PASSWORD: justasstupidtestpassword!
        POSTGRES_DB: postgres
    - &redis_image
      image: bitnami/redis:latest
      environment:
        ALLOW_EMPTY_PASSWORD: yes
    - &redis_cluster_image
      image: grokzen/redis-cluster:6.2.1
      environment:
        ALLOW_EMPTY_PASSWORD: yes
        MASTERS: 3
        SLAVES_PER_MASTER: 1
        INITIAL_PORT: 1000   # In CircleCI always use ports 1000-1005

  golang-docker-amd64-postgres-updater:
    description: Special only for pg-updater service with PG_WAL_LEVEL=logical
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
    resource_class: << parameters.size >>
    docker: &golang_docker_postgres_update_config
    - *wiz_ci_image
    - <<: *pg_image
      environment:
        POSTGRES_PASSWORD: justasstupidtestpassword!
        POSTGRES_DB: postgres
        PG_WAL_LEVEL: logical

  golang-docker-amd64-dynamo:
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
    resource_class: << parameters.size >>
    docker: &golang_docker_dynamo_config
    - *wiz_ci_image
    - *pg_image
    - *redis_image
    - *redis_cluster_image
    - &dynamo_image
      image: amazon/dynamodb-local

  golang-docker-amd64-janus:
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
    resource_class: << parameters.size >> # TODO: enforce large size
    docker: &golang_docker_janus_config
    - *wiz_ci_image
    - *pg_image
    - *redis_image
    - *redis_cluster_image
    - *dynamo_image
    - image: << parameters.ecr_url >>/janusgraph:<< pipeline.parameters.janusgraph_tag>>

  golang-docker-amd64-janus-and-kusto:
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
    resource_class: << parameters.size >>
    docker:
    - *wiz_ci_image
    - *pg_image
    - *redis_image
    - *redis_cluster_image
    - *dynamo_image
    - image: << parameters.ecr_url >>/janusgraph:<< pipeline.parameters.janusgraph_tag>>
    - image: mcr.microsoft.com/azuredataexplorer/kustainer-linux:latest
      environment:
        ACCEPT_EULA: Y

  golang-docker-amd64-kusto:
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
    resource_class: << parameters.size >>
    docker:
    - *wiz_ci_image
    - *pg_image
    - *redis_image
    - *redis_cluster_image
    - *dynamo_image
    - image: mcr.microsoft.com/azuredataexplorer/kustainer-linux:latest
      environment:
        ACCEPT_EULA: Y

  golang-machine-arm64-basic: &arm_machine
    parameters:
      size: *size_param
    machine:
      image: ubuntu-2204:2024.01.1
    environment: &machine_env
      BUILDKIT_PROGRESS: plain
      DOCKER_BUILDKIT: 1
      GOPATH: /go
    resource_class: arm.<< parameters.size>>

  golang-machine-arm64-postgres-updater: *arm_machine

  golang-machine-amd64-basic:
    parameters:
      size: *size_param
    machine:
      image: ubuntu-2204:2024.01.1
    environment: *machine_env
    resource_class: << parameters.size >>

  golang-machine-arm64-janus: *arm_machine
  golang-machine-arm64-dynamo: *arm_machine
  golang-machine-arm64-janus-and-kusto: *arm_machine
  golang-machine-arm64-kusto: *arm_machine  # this is a lie, kustainer does not have arm image

  golang-runner-basic: &golang_runner_basic
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
      arch: &arch_param
        type: string
        default: docker-amd64
    resource_class: wiz-sec/golang-<< parameters.arch >>-<< parameters.size >>-basic
    docker: *golang_docker_basic_config

  golang-runner-postgres-updater:
    <<: *golang_runner_basic
    description: Special only for pg-updater service with PG_WAL_LEVEL=logical
    docker: *golang_docker_postgres_update_config

  golang-runner-dynamo:
    <<: *golang_runner_basic
    resource_class: wiz-sec/golang-<< parameters.arch >>-<< parameters.size >>-dynamo
    docker: *golang_docker_dynamo_config

  golang-runner-janus:
    <<: *golang_runner_basic
    resource_class: wiz-sec/golang-<< parameters.arch >>-<< parameters.size >>-janus
    docker: *golang_docker_janus_config

# GOLANG EXECUTORS END

  python:
    parameters:
      python_version:
        type: string
        default: "3.10"
      executor_size:
        type: string
        default: small
    docker:
    - image: cimg/python:<< parameters.python_version >>
    resource_class: << parameters.executor_size >>

  golang-python:
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond/external
      resource_class:
        type: string
        default: small
    docker:
    - image: << parameters.ecr_url >>/golang-python:<< pipeline.parameters.golang_python_tag>>
    resource_class: << parameters.resource_class >>

  replicator:
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-1.amazonaws.com/beyond
    docker:
    - image: << parameters.ecr_url >>/image-replicator:028702b
    resource_class: small

  golang-only: &golang-only-executor
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
      resource_class:
        type: string
        default: medium
    docker:
    - image: << parameters.ecr_url >>/external/wiz-ci:<< pipeline.parameters.wiz_ci_tag >>
      environment:
        BUILDKIT_PROGRESS: plain
        DOCKER_BUILDKIT: 1
    resource_class: << parameters.resource_class >>

  golang-only-large:
    <<: *golang-only-executor
    resource_class: large

  golang-only-xlarge:
    <<: *golang-only-executor
    resource_class: xlarge

  golang-only-2xlarge:
    <<: *golang-only-executor
    resource_class: 2xlarge

  golang-only-2xlarge-plus:
    <<: *golang-only-executor
    resource_class: "2xlarge+"

  cypress-web:
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
      size:
        type: string
        default: large
    docker: &cypress-web-docker
    - image: << parameters.ecr_url >>/external/wiz-cypress:<< pipeline.parameters.wiz_cypress_tag >>
    resource_class: << parameters.size >>

  web-runner:
    description: UI runner, default is cypress
    parameters:
      ecr_url: *ecr_url_param
      size: *size_param
      image:
        type: string
        default: wiz-cypress
      tag:
        type: string
        default: << pipeline.parameters.wiz_cypress_tag >>
    docker:
    - image: << parameters.ecr_url >>/external/<< parameters.image >>:<< parameters.tag >>
    resource_class: wiz-sec/cypress-<< parameters.size >>

  base:
    docker:
    - image: cimg/base:2023.05
    resource_class: small
  deployer:
    docker:
    - image: cimg/deploy:2023.06.1
    resource_class: small

commands:
  write_cache_key_files:
    steps:
      - run:
          name: cache keys
          command: |
            date +%F | tee /tmp/day
            date +%U | tee /tmp/week
  self_hosted_restore_cache:
    parameters:
      key1: *type_str
      key2: *type_str_empty
      key3: *type_str_empty
      key4: *type_str_empty
      key5: *type_str_empty
      cache_title: *type_str
    steps:
      - run:
          name: ⬇️ Self-Hosted Restore cache (<< parameters.cache_title >>)
          command: python3 /tmp/circleci-wiztools/src/scripts/self_hosted_cache.py restore-cache --key1 "<< parameters.key1 >>" --key2 "<< parameters.key2 >>" --key3 "<< parameters.key3 >>" --key4 "<< parameters.key4 >>" --key5 "<< parameters.key5 >>"

  self_hosted_save_cache:
    parameters:
      key: *type_str
      path1: *type_str
      path2: *type_str_empty
      path3: *type_str_empty
      path4: *type_str_empty
      path5: *type_str_empty
      cache_title: *type_str
    steps:
      - run:
          name: ⬆️ Self-Hosted Save cache (<< parameters.cache_title >>)
          command: python3 /tmp/circleci-wiztools/src/scripts/self_hosted_cache.py save-cache --key "<< parameters.key >>" --path1 "<< parameters.path1 >>" --path2 "<< parameters.path2 >>" --path3 "<< parameters.path3 >>" --path4 "<< parameters.path4 >>" --path5 "<< parameters.path5 >>"

  clone_circleci_wiztools:
    steps:
      - install_single_ssh_key: &install_circleci_wiztools_ssh_key
          fingerprint: a8:60:f6:ce:31:f8:a3:0f:0f:79:13:f3:29:eb:29:5d
          host: circleci-wiztools
      - run: &clone_circleci_wiztools
          name: Clone circleci-wiztools to /tmp/circleci-wiztools
          command: |
            [[ -d /tmp/circleci-wiztools ]] || git clone git@circleci-wiztools:wiz-sec/circleci-wiztools.git /tmp/circleci-wiztools

  cached_checkout:
    description: Faster checkout by using git index cache. Not faster than sparse
    parameters:
      runner: *type_bool_false
      cache_version:
        default: v3
        type: string
    steps:
    - set_wiz_cache
    - install_git_lfs
    - run: &create_unique_cache_key
    # create unique daily cache based on date, git version, and working dir
        command: |
          date +%F > /tmp/gcf
          git version >> /tmp/gcf
          pwd >> /tmp/gcf
    - run: &ssh_keyscan_github
        name: ssh-keyscan github
        command: mkdir -p ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - when:
        condition: << parameters.runner >>
        steps:
        - self_hosted_restore_cache:
            key1: << parameters.cache_version >>-{{ checksum "/tmp/gcf" }}
            cache_title: restore daily clone cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - restore_cache:
              name: restore daily cache
              keys:
              - << parameters.cache_version >>-{{ checksum "/tmp/gcf" }}
    - checkout
    - run:
        # fetch from remote in order to make sure we can perform diff
        name: fetch
        command: git fetch --force origin develop
    - when:
        condition: << parameters.runner >>
        steps:
        - self_hosted_save_cache:
            key: << parameters.cache_version >>-{{ checksum "/tmp/gcf" }}
            path1: .git
            cache_title: save daily clone cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
        - save_cache:
            name: save daily cache
            key: << parameters.cache_version >>-{{ checksum "/tmp/gcf" }}
            paths:
            - .git

  checkout_sparse:
    parameters:
      component: *type_str_empty
      checkout_files: *type_str_empty
      checkout_folders: *type_str_empty
    steps:
    - run: *ssh_keyscan_github
    - run:
        name: sparse git checkout
        command: |
          git init
          git remote add origin --no-tags -t $CIRCLE_BRANCH -t develop $CIRCLE_REPOSITORY_URL
          git config core.sparseCheckout true
          IFS=' ' read -ra items \<<< "<< parameters.checkout_folders >> << parameters.component >> << parameters.checkout_files >>"
          for item in "${items[@]}"; do
              echo "$item" >> .git/info/sparse-checkout
          done
          cat .git/info/sparse-checkout
          git fetch --depth 1 --filter=blob:none origin develop $CIRCLE_BRANCH
          git checkout $CIRCLE_BRANCH
          ls -al

  check_for_rerun_with_ssh:
    steps:
      - run:
          when: always
          name: check for rerun with ssh
          no_output_timeout: 121m
          command: bash $(git rev-parse --show-toplevel)/.circleci/scripts/check_ssh.sh

  install_single_ssh_key:
    parameters:
      fingerprint: *type_str
      host: *type_str
    steps:
    - add_ssh_keys:
        fingerprints:
        - << parameters.fingerprint >>
    - run:
        name: Setup ssh config << parameters.host >>
        command: |
          fingerprint="<< parameters.fingerprint >>"
          id_file="~/.ssh/id_rsa_${fingerprint//:/}" #fingerprint without colons
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "Host << parameters.host >>
            Hostname github.com
            IdentityFile $id_file
            IdentitiesOnly yes" > ~/.ssh/config

  copy_ssh_keys_to_user_root:
    description: Copy SSH keys to user root
    steps:
    - run:
        name: Copy .ssh to user root
        command: |
          sudo cp -fr ~/.ssh /root/

  validate_gqlgen:
    parameters:
      component:
        type: string
        default: ""
      job_timeout:
        type: string
        default: "10m"
      cache_key:
        type: string
        default: v4
      gqlgen:
        type: enum
        default: gqlgen
        enum:
        - gqlgen
        - gqlgen-backoffice
      runner:
        type: boolean
        default: false
    steps:
    - cached_checkout:
        runner: << parameters.runner >>
    - enable_private_repo_access
    - write_cache_key_files
    - when:
        condition: << parameters.runner >>
        steps:
          - self_hosted_restore_cache:
              key1: << parameters.gqlgen >>-<< parameters.cache_key >>-<< parameters.component >>-{{ checksum "/tmp/week" }}-{{ checksum "gqlgen/go.mod" }}
              key2: << parameters.gqlgen >>-<< parameters.cache_key >>-<< parameters.component >>-{{ checksum "/tmp/week" }}
              cache_title: restore gqlgen cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - restore_cache:
              keys:
              - << parameters.gqlgen >>-<< parameters.cache_key >>-<< parameters.component >>-{{ checksum "/tmp/week" }}-{{ checksum "gqlgen/go.mod" }}
              - << parameters.gqlgen >>-<< parameters.cache_key >>-<< parameters.component >>-{{ checksum "/tmp/week" }}
    - when:
        condition:
          or:
            - equal: [<< parameters.component >>, web ]
            - equal: [<< parameters.gqlgen >>, gqlgen-backoffice ]
        steps:
        - cached_yarn_install:
            package_name: web
            runner: << parameters.runner >>
    - when:
        condition: << parameters.runner >>
        steps:
          - self_hosted_restore_cache:
              key1: << parameters.gqlgen >>-last-successful-v1-develop
              cache_title: restore last successful gqlgen cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - restore_cache:
              keys:
              - << parameters.gqlgen >>-last-successful-v1-develop
    - run:
        name: Validate << parameters.gqlgen >> is up to date
        no_output_timeout: << parameters.job_timeout >>
        command: bash .circleci/scripts/validate_<< parameters.gqlgen >>_up_to_date.sh << parameters.component >>
    - store_artifacts:
        path: /tmp/generation-logs
    - when:
        condition:
          equal: [gqlgen, << parameters.gqlgen >>]
        steps:
          - store_artifacts:
              path: /tmp/generated-files
    - when:
        condition: << parameters.runner >>
        steps:
          - self_hosted_save_cache:
              key: << parameters.gqlgen >>-<< parameters.cache_key >>-<< parameters.component >>-{{ checksum "/tmp/week" }}-{{ checksum "gqlgen/go.mod" }}
              path1: /tmp/go/pkg/mod
              cache_title: save gqlgen cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - save_cache:
              key: << parameters.gqlgen >>-<< parameters.cache_key >>-<< parameters.component >>-{{ checksum "/tmp/week" }}-{{ checksum "gqlgen/go.mod" }}
              paths:
              - /tmp/go/pkg/mod
    
    - when:
        condition:
          equal: [develop, << pipeline.git.branch >>]
        steps:
        - when:
            condition: << parameters.runner >>
            steps:
              - self_hosted_save_cache:
                  key: << parameters.gqlgen >>-last-successful-<<parameters.cache_key >>-develop-{{ checksum "/tmp/<< parameters.gqlgen >>/last_succesful.txt" }}
                  path1: /tmp/<< parameters.gqlgen >>
                  cache_title: save last successful gqlgen cache
        - when:
            condition:
              not: << parameters.runner >>
            steps:
              - save_cache:
                  key: << parameters.gqlgen >>-last-successful-<<parameters.cache_key >>-develop-{{ checksum "/tmp/<< parameters.gqlgen >>/last_succesful.txt" }}
                  paths:
                  - /tmp/<< parameters.gqlgen >>

  validate_proto:
    steps:
    - cached_checkout
    - enable_private_repo_access
    - restore_cache:
        keys:
        - go-mod-v6-validateproto
    - run:
        name: Validate Protobuf is up to date
        command: bash .circleci/scripts/validate_protobuf_up_to_date.sh
    - save_cache:
        key: go-mod-v6-validateproto
        paths:
        - /go/pkg/mod

  validate_gosec:
    parameters:
      component:
        type: string
    steps:
    - cached_checkout
    - enable_private_repo_access
    - run:
        name: Install the latest gosec
        command: go install github.com/securego/gosec/v2/cmd/gosec@latest
    - run:
        name: Running gosec
        no_output_timeout: 30m
        command: |
          cd << parameters.component >>
          task gosec
    - wiz-slack/notify:
        enable_slack_mention: false
        slack_channels: code-scans
        custom_text: "<< parameters.component >> : GoSec scan failed"
        hide_author: true

  validate_deps:
    steps:
    - cached_checkout
    - enable_private_repo_access
    - restore_cache:
        keys:
        - go-mod-v5-validatedeps
    - run:
        name: Validate dependencies
        command: |
          export branch=origin/$(git rev-parse --abbrev-ref HEAD)
          export GOFLAGS=-mod=mod
          source validatedeps.sh
    - save_cache:
        key: go-mod-v5-validatedeps
        paths:
        - /go/pkg/mod

  validate_nativetypes:
    steps:
    - cached_checkout
    - enable_private_repo_access
    - restore_cache:
        keys:
        - go-mod-v5-nativetypes
    - run:
        name: Validate NativeTypes generated properly
        command: bash .circleci/scripts/validate_nativetypes.sh
    - save_cache:
        key: go-mod-v5-nativetypes
        paths:
        - /go/pkg/mod

  validate_component_registration:
    steps:
    - cached_checkout
    - enable_private_repo_access
    - run:
        name: Validate component registration
        command: |
          cd commonlib
          GOFLAGS="-mod=mod" go test -test.v -test.paniconexit0 -test.run 'TestAllComponentsAreRegistered'

  validate_deployed_binary_version:
    parameters:
      binary_package_name: *type_str
      version_file_name:
        type: string
        default: BASE_VERSION
      skip_patch_version: *type_bool_false
    steps:
    - cached_checkout
    - enable_private_repo_access
    - run:
        name: Validate version file
        environment:
          BRANCH: << pipeline.git.branch >>
          PACKAGE_NAME: << parameters.binary_package_name >>
          VERSIONS_FILE_NAME: << parameters.version_file_name >>
          SKIP_PATCH_VERSION: << parameters.skip_patch_version >>
        command: bash ~/project/.circleci/scripts/validate_deployed_binary_version.sh

  validate_sql_migrations:
    steps:
    - cached_checkout
    - enable_private_repo_access
    - run:
        name: Validate async sql migrations
        command: bash .circleci/scripts/validate_sql_migrations.sh

  sync_components_to_ops:
    steps:
    - run:
        name: Sync components to ops repository
        command: |
          export OPS_REPO="https://github.com/wiz-sec/ops"
          export WIZ_PATH=$(eval echo $CIRCLE_WORKING_DIRECTORY)
          export CURRENT_WIZ_COMMIT="${CIRCLE_SHA1}"
          export CURRENT_BRANCH="${CIRCLE_BRANCH}"
          export DRY_RUN=false

          cd .circleci
          bash sync_components.sh

  save_version_to_ops:
    parameters:
      package_name:
        type: string
        default: '[^:]+'
      packages:
        type: string
        default: ''
      packages_filename:
        type: string
        default: ''
      versions_files_path:
        type: string
        default: deployment/versions/
      dry_run:
        type: boolean
        default: false
      non_deployable_packages:
        type: string
        default: ^buildlibs|^diskanalyzerlib|^datascanlib|^datascan-diskdb-engines|^validate
    steps:
    - run:
        name: 🌟 UPDATE OPS VERSIONS
        command: |
          echo "[INFO] setup parameters"
          export PACKAGES="<<parameters.packages>>"
          export PACKAGES_FILE="<<parameters.packages_filename>>"
          export PKG_REGEX="<<parameters.package_name>>"
          export NON_DEPLOYABLE_PACKAGES="<<parameters.non_deployable_packages>>"
          export VERSIONS_FILE_PREFIX="<<parameters.versions_files_path>>"
          export OPS_VERSIONS_FILE_PREFIX=${<<parameters.versions_files_path>>/versions/"versions-ops"}
          export OPS_REPO="https://github.com/wiz-sec/ops"
          export WIZ_PATH=$( eval echo $CIRCLE_WORKING_DIRECTORY )
          export CURRENT_WIZ_COMMIT="${CIRCLE_SHA1}"
          export CURRENT_BRANCH=${CIRCLE_BRANCH}
          export DRY_RUN=<<parameters.dry_run>>

          echo "[INFO] running script"
          cd .circleci
          bash sync_versions.sh

  validate_gql_schema:
    parameters:
      variant: *type_str
    steps:
    - run:
        name: Validate wiz schema
        command: |
          # we cant pass env to commands through $BASH_ENV, so we must pass it to a temp file
          VARIANT=$(cat /tmp/VARIANT 2>/dev/null || true)
          if [[ -z "${VARIANT}" ]]; then
            VARIANT="<<parameters.variant>>"
          fi
          echo "Variant chosen as ${VARIANT}"
          cd gqlgen
          ./apollo-gen.sh
          ./apollo-validate.sh ${VARIANT}
        when: always
    - store_artifacts:
        path: /tmp/validation-artifacts

  validate_gql_schema_prod:
    parameters:
      rover-key-type: *type_str
    steps:
    - restore_cache:
        keys:
        - slack_libs_python_v1
    - run:
        name: install slack message script libs
        command: |
          mkdir -p $PIP_CACHE_DIR
          pip3 install boto3==1.24.8 slack_sdk==3.19.1
        environment:
          PIP_CACHE_DIR: /tmp/pip_cache
    - save_cache:
        key: slack_libs_python_v1
        paths:
        - /tmp/pip_cache
    - run:
        name: Validate wiz gql schema against prod <<parameters.rover-key-type>>
        no_output_timeout: 30m
        command: |
          git clone https://github.com/wiz-sec/ops ../ops/
          ./gqlgen/apollo-validate-prod.sh ../ops/terraform/modules/env_config/prod.yaml "<<parameters.rover-key-type>>" "$(pwd)" "$(realpath ../ops/)"
    - store_artifacts:
        path: /tmp/errors_output

  validate_backoffice_gql_schema:
    parameters:
      variant: *type_str
      app-type: *type_str
    steps:
    - run:
        name: Validate backoffice schema
        command: |
          # we cant pass env to commands through $BASH_ENV, so we must pass it to a temp file
          VARIANT=$(cat /tmp/VARIANT 2>/dev/null || true)
          if [[ -z "${VARIANT}" ]]; then
            VARIANT="<<parameters.variant>>"
          fi
          echo "Variant chosen as ${VARIANT}"
          cd gqlgen-backoffice
          ./apollo-gen.sh
          ./apollo-validate.sh ${VARIANT}
        when: always
    - store_artifacts:
        path: /tmp/validation-artifacts-backoffice

  update_gql_schema:
    steps:
    - run:
        name: 💫 UPDATE GQL
        command: |
          cd gqlgen && ./apollo-gen.sh
          echo ""
          echo "Commit gql schemas to ops repository"
          cd ../.circleci && bash sync_schema.sh

  update_backoffice_gql_schema:
    steps:
    - run:
        name: 🪐 UPDATE BO GQL
        command: |
          cd gqlgen-backoffice && ./apollo-gen.sh
          echo "Commit gql schemas to ops repository"
          cd ../.circleci && bash sync_schema_backoffice.sh

  upload_sarif:
    parameters:
      sarif_path: *type_str
      codeql_version:
        type: string
        default: v2.15.2
    steps:
    - wiztools/get_remote_file:
        sha256: "d746ccc15992e307b95ac96f8399f8f444361cfbc569963b8098667b30a6adc6"
        target_filepath: /tmp/codeql.zip
        url: "https://github.com/github/codeql-cli-binaries/releases/download/<<parameters.codeql_version>>/codeql-linux64.zip"
    - restore_cache:
        keys:
        - cache-codeql-<< parameters.codeql_version >>-{{ checksum "/tmp/codeql.zip" }}
    - run:
        name: install codeql cli
        command: |
          unzip -n /tmp/codeql.zip -d /tmp/
          chmod +x /tmp/codeql/codeql
    - save_cache:
        key: cache-codeql-<< parameters.codeql_version >>-{{ checksum "/tmp/codeql.zip" }}
        paths:
          - /tmp/codeql/
    - run:
        name: Upload scan to GitHub as Sarif
        command: |
          /tmp/codeql/codeql github upload-results \
            --sarif="<<parameters.sarif_path>>" \
            --repository="wiz-sec/wiz" \
            --ref="$(git rev-parse --symbolic-full-name HEAD)"

  scan_image_with_wizcli:
    parameters:
      image: *type_str
      runner: *type_bool_false
      policy:
        type: string
        default: Wiz policy,high-audit-policy
    steps:
    - run:
        name: Scan image with WizCLI
        command: bash .circleci/scripts/wizcli.sh
        environment:
          OPERATION: docker-scan
          IMAGE: << parameters.image >>
          POLICY: << parameters.policy >>
          RUNNER: << parameters.runner >>
    # - upload_sarif: # Currently broken
    #    sarif_path: "/tmp/wizcli-output/wizcli-scan-result.sarif.json"
    - store_artifacts:
        path: /tmp/wizcli-output

  tag_image_with_wizcli:
    parameters:
      image: *type_str
      runner: *type_bool_false
      package_name: *type_str
    steps:
    - run:
        name: Tag image with WizCLI
        command: bash .circleci/scripts/wizcli.sh
        environment:
          OPERATION: tag
          IMAGE: << parameters.image >>
          RUNNER: << parameters.runner >>
          PACKAGE_NAME: << parameters.package_name >>
    - store_artifacts:
        path: /tmp/wizcli-output


  login_to_ecr:
    parameters:
      region:
        type: string
        default: ${AWS_REGION}
      aws_access_key:
        type: string
        default: ${AWS_ACCESS_KEY_ID}
      aws_access_key_secret:
        type: string
        default: ${AWS_SECRET_ACCESS_KEY}
      aws_ecr_account_url:
        type: string
        default: ${AWS_ECR_ACCOUNT_URL}
    steps:
    - run:
        name: Login to ECR << parameters.aws_ecr_account_url >>
        command: |
          export AWS_PAGER=""
          export AWS_REGION=<< parameters.region >>
          export TARGET_AWS_ECR_ACCOUNT_URL=<< parameters.aws_ecr_account_url >>
          export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key >>
          export AWS_SECRET_ACCESS_KEY=<< parameters.aws_access_key_secret >>
          echo "Logging in to https://$TARGET_AWS_ECR_ACCOUNT_URL"
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin https://$TARGET_AWS_ECR_ACCOUNT_URL

  push_to_ecr:
    parameters:
      ecr_prefix:
        type: string
        default: beyond
      package_name: *type_str
      region:
        type: string
        default: us-east-2
      aws_access_key: *type_str
      aws_access_key_secret: *type_str
      aws_ecr_account_url: *type_str
      push_tag_only: *type_bool_false
      login_to_ecr: *type_bool_true
      runner_enabled: *type_bool_false
      tag:
        type: string
        default: << pipeline.git.revision >>
    steps:
    - when:
        condition: << parameters.login_to_ecr >>
        steps:
        - login_to_ecr:
            region: << parameters.region >>
            aws_access_key: << parameters.aws_access_key >>
            aws_access_key_secret: << parameters.aws_access_key_secret >>
            aws_ecr_account_url: << parameters.aws_ecr_account_url >>
    - run:
        name: push to ECR << parameters.aws_ecr_account_url >>
        environment:
          PACKAGE_NAME: << parameters.package_name >>
          ECR_PREFIX: << parameters.ecr_prefix >>
          REGISTRY_TYPE: ecr
          BRANCH_NAME: << pipeline.git.branch >>
          PUSH_TAG_ONLY: << parameters.push_tag_only >>
          RUNNER_ENABLED: << parameters.runner_enabled >>
        command: |
          export COMMIT_SHA=${CIRCLE_SHA1}
          export AWS_PAGER=""
          export AWS_REGION=<< parameters.region >>
          export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key >>
          export AWS_SECRET_ACCESS_KEY=<< parameters.aws_access_key_secret >>
          export TARGET_AWS_ECR_ACCOUNT_URL=<< parameters.aws_ecr_account_url >>
          export REMOTE_DOCKER_REGISTRY=$TARGET_AWS_ECR_ACCOUNT_URL/$ECR_PREFIX
          export TAG=<< parameters.tag >>
          bash .circleci/docker_push.sh

  install_git_lfs:
    description: Install GIT-LFS
    steps:
    - wiztools/install_git_lfs:
        filepath_prefix: "/tmp/gitlfs/gitlfs"
        wiztools_clone_path: "/tmp/circleci-wiztools"
        git_lfs_version: "3.4.1"
    - run:
        name: Setup GIT-LFS .gitconfig
        command: git lfs install --skip-repo

  replicate_image:
    parameters:
      package_name: *type_str
      tag: *type_str
      alias_tags:
        type: string
        default: ""
      extra_target_registries: *type_str_empty
      target_azure: *type_bool_true
      target_netscanner_gov: *type_bool_true
      target_auth_gov: *type_bool_true
      target_netscanner_fedtest: *type_bool_true
      target_netscanner_fedramp: *type_bool_true
      target_auth_fedtest: *type_bool_true
      target_auth_fedramp: *type_bool_true
      target_auth_fedstg1: *type_bool_true
      target_netscanner_fedstg1: *type_bool_true
      target_auth_fedstg2: *type_bool_true
      target_netscanner_fedstg2: *type_bool_true
      target_digital_trust_gov: *type_bool_false

    steps:
    - wiztools/install_boto3:
        executor_key: "v1"
    - run:
        name: 🎞️ Trigger image replication
        environment:
          DOCKER_TAG: << parameters.tag >>
          COMMIT_SHA: <<pipeline.git.revision >>
          PACKAGE_NAME: << parameters.package_name >>
        command: |
          export PIPELINE_NUMBER=<< pipeline.number >>
          export ALIAS_TAGS=<< parameters.alias_tags >>
          export target_azure="<< parameters.target_azure >>"
          export target_aws_gov_netscanner="<< parameters.target_netscanner_gov >>"
          export target_aws_gov_auth="<< parameters.target_auth_gov >>"
          export target_aws_fedtest_netscanner="<< parameters.target_netscanner_fedtest >>"
          export target_aws_fedramp_netscanner="<< parameters.target_netscanner_fedramp >>"
          export target_aws_fedstg1_netscanner="<< parameters.target_netscanner_fedstg1 >>"
          export target_aws_fedstg2_netscanner="<< parameters.target_netscanner_fedstg2 >>"
          export target_aws_fedtest_auth="<< parameters.target_auth_fedtest >>"
          export target_aws_fedramp_auth="<< parameters.target_auth_fedramp >>"
          export target_aws_fedstg1_auth="<< parameters.target_auth_fedstg1 >>"
          export target_aws_fedstg2_auth="<< parameters.target_auth_fedstg2 >>"
          export target_aws_gov_digitaltrust="<< parameters.target_digital_trust_gov >>"
          export EXTRA_TARGET_REGISTRIES="<< parameters.extra_target_registries >>"
          bash .circleci/scripts/replicate_image.sh

  clone_lemminx_wiz_repo:
    steps:
    - add_ssh_keys:
        fingerprints:
        - c5:5f:59:4a:45:09:9a:dd:cb:7a:d1:30:c0:f5:e7:d9
    - run:
        name: Install SSH key lemminx
        command: |
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo 'Host gitwiz
            Hostname github.com
            User git
            IdentityFile ~/.ssh/id_rsa_c55f594a45099addcb7ad130c0f5e7d9
            IdentitiesOnly yes' > ~/.ssh/config
    - run:
        name: clone lemminx
        command: git clone -b 0.21.0 git@gitwiz:wiz-sec/lemminx.git ../lemminx

  build_golang:
    parameters:
      package_name: *type_str
      tag: *type_str
      build_docker_image: *type_bool
      scan_image: *type_bool
      scan_image_policy_name:
        type: string
        default: "Wiz policy,high-audit-policy"
      push_to_ecr: *type_bool
      push_tag_only: *type_bool
      replicate_image: *type_bool
      push_to_acr: *type_bool
      push_to_netscanner_ecr: *type_bool
      push_to_digital_trust_gov: *type_bool
      push_to_auth_ecr: *type_bool
      job_timeout:
        type: string
        default: "10m"
      fips: *type_bool
      cache_key: *type_str
      runner_enabled: *type_bool_false
      gocache_legacy_behavior: *type_bool_false
      extra_target_registries: *type_str_empty
    steps:
    - when:
        condition:
          and:
          - << parameters.build_docker_image >>
        steps:
          - login_to_ecr
          - run:
              name: 🐳🐳🐳 Build Docker image
              no_output_timeout: << parameters.job_timeout >>
              command: cd << parameters.package_name >> && task FIPS="<< parameters.fips >>" REPO="$AWS_ECR_ACCOUNT_URL/" TAG="<<parameters.tag>>" RUNNER_ENABLED="<<parameters.runner_enabled>>" build-docker
          - when:
              condition: << parameters.scan_image >>
              steps:
                - scan_image_with_wizcli:
                    image: "$AWS_ECR_ACCOUNT_URL/beyond/<< parameters.package_name >>:<<parameters.tag>>"
                    runner: "<< parameters.runner_enabled >>"
                    policy: "<< parameters.scan_image_policy_name >>"

    - when:
        condition:
          and:
          - equal: [<< pipeline.git.branch >>, develop]
          - << parameters.gocache_legacy_behavior >>
        steps:
          # can be expensive step - do this only once a day only for develop build
          - save_cache:
              name: save << parameters.package_name >> go build cache
              key: go-build-<<parameters.fips>>-<<parameters.cache_key>>-{{ arch }}-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-{{ checksum "/tmp/day" }}
              paths:
              - /tmp/go/build

    - when:
        condition:
          and:
          - true
          - << parameters.push_to_ecr >>
          - << parameters.build_docker_image >>
        steps:
            # Push package to wiz private ECR = beyond
        - push_to_ecr:
            package_name: << parameters.package_name >>
            aws_ecr_account_url: $AWS_ECR_ACCOUNT_URL
            aws_access_key: $AWS_ACCESS_KEY_ID
            aws_access_key_secret: $AWS_SECRET_ACCESS_KEY
            push_tag_only: << parameters.push_tag_only >>
            tag: << parameters.tag >>
            login_to_ecr: false
            runner_enabled: << parameters.runner_enabled >>
            # Push package to wiz private gov ECR = wiz-gov
        - when:
            condition: << parameters.replicate_image >>
            steps:
            - replicate_image:
                package_name: << parameters.package_name >>
                tag: << parameters.tag >>
                target_azure: << parameters.push_to_acr >>
                target_netscanner_gov: << parameters.push_to_netscanner_ecr >>
                target_auth_gov: << parameters.push_to_auth_ecr >>
                target_netscanner_fedtest: << parameters.push_to_netscanner_ecr >>
                target_netscanner_fedstg1: << parameters.push_to_netscanner_ecr >>
                target_netscanner_fedstg2: << parameters.push_to_netscanner_ecr >>
                target_netscanner_fedramp: << parameters.push_to_netscanner_ecr >>
                target_auth_fedtest: << parameters.push_to_auth_ecr >>
                target_auth_fedramp: << parameters.push_to_auth_ecr >>
                target_auth_fedstg1: << parameters.push_to_auth_ecr >>
                target_auth_fedstg2: << parameters.push_to_auth_ecr >>
                target_digital_trust_gov: << parameters.push_to_digital_trust_gov >>
                extra_target_registries: << parameters.extra_target_registries >>

    - when:
        condition:
          and:
          - true
          - << parameters.push_to_acr >>
              # If it was pushed to ecr - it will use image-replictor to push to ACR
              # - not: << parameters.push_to_ecr >>
          - << parameters.build_docker_image >>
        steps:
        - run:
            name: Push to ACR
            command: |
              echo "Image was replicated"

  build_node_docker:
    parameters:
      package_name: *type_str
      tag: *type_str
      fips: *type_bool_false
      runner: *type_bool_false
      login_to_ecr: *type_bool_true
    steps:
      - run:
          name: Build Docker image
          command: |
            cd << parameters.package_name >>
            task FIPS="<< parameters.fips >>" REPO="$AWS_ECR_ACCOUNT_URL/" TAG="<< parameters.tag >>" RUNNER_ENABLED="<< parameters.runner >>" build-docker
      - scan_image_with_wizcli:
          image: $AWS_ECR_ACCOUNT_URL/beyond/<< parameters.package_name >>:<< parameters.tag >>
          runner: "<< parameters.runner >>"
      - when:
          condition: true
          steps:
          # Push package to wiz private ECR = beyond
          - push_to_ecr:
              login_to_ecr: << parameters.login_to_ecr >>
              package_name: << parameters.package_name >>
              aws_ecr_account_url: $AWS_ECR_ACCOUNT_URL
              aws_access_key: $AWS_ACCESS_KEY_ID
              aws_access_key_secret: $AWS_SECRET_ACCESS_KEY
              tag: << parameters.tag >>
              push_tag_only: << parameters.fips >>
              runner_enabled: << parameters.runner >>
          - replicate_image:
              package_name: << parameters.package_name >>
              tag: << parameters.tag >>
              target_azure: false
              target_netscanner_gov: false
              target_auth_gov: false
              target_netscanner_fedtest: false
              target_netscanner_fedstg1: false
              target_netscanner_fedstg2: false
              target_netscanner_fedramp: false
              target_auth_fedtest: false
              target_auth_fedramp: false
              target_auth_fedstg1: false
              target_auth_fedstg2: false
          - tag_image_with_wizcli:
              image: $AWS_ECR_ACCOUNT_URL/beyond/<< parameters.package_name >>:<< parameters.tag >>
              package_name: << parameters.package_name >>
              runner: << parameters.runner >>

  cached_yarn_install:
    parameters:
      yarnlock_path:
        type: string
        default: yarn.lock
      package_name:
        type: string
      install_command:
        type: string
        default: task install
      key:
        type: string
        default: v103
      runner: *type_bool_false
    steps:
    - run: &yarn_cache_file_key
        name: Cache key file
        command: |
          date +%U > /tmp/<< parameters.package_name >>_yarn_cache_key
          node -v >> /tmp/<< parameters.package_name >>_yarn_cache_key
          cd << parameters.package_name >>
          pwd >> /tmp/<< parameters.package_name >>_yarn_cache_key
    - when:
        condition: << parameters.runner >>
        steps:
        - self_hosted_restore_cache:
            key1: node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
            key2: node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>
            cache_title: restore node cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - restore_cache:
              keys:
              - node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
              - node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>
    - run:
        name: Install dependencies
        command: |
          cd << parameters.package_name >>
          export CYPRESS_CACHE_FOLDER=$(pwd)/.cache/cypress
          export YARN_CACHE_FOLDER=$(pwd)/.yarn/cache
          << parameters.install_command >>
    - when:
        condition: << parameters.runner >>
        steps:
        - self_hosted_save_cache:
            key: node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
            path1: << parameters.package_name >>/.yarn/cache
            path2: << parameters.package_name >>/node_modules
            cache_title: save yarn and node_modules cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - save_cache:
              key: node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
              paths:
              - << parameters.package_name >>/.yarn/cache
              - << parameters.package_name >>/node_modules

  cached_lint:
    parameters:
      package_name:
        type: string
      yarnlock_path:
        type: string
        default: yarn.lock
      lint_command:
        type: string
        default: task lint
      key:
        type: string
        default: v10
      runner: *type_bool_false
    steps:
    - run:
        name: Cache key file
        command: |
          date +%U > /tmp/<< parameters.package_name >>_lint_cache_key
          node -v >> /tmp/<< parameters.package_name >>_lint_cache_key
          cd << parameters.package_name >>
          pwd >> /tmp/<< parameters.package_name >>_lint_cache_key
    - when:
        condition: << parameters.runner >>
        steps:
        - self_hosted_restore_cache:
            key1: << parameters.package_name >>-lint-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_lint_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
            cache_title: restore lint cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
          - restore_cache:
              keys:
              - << parameters.package_name >>-lint-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_lint_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
    - run:
        name: Lint
        no_output_timeout: 30m
        command: |
          cd << parameters.package_name >>
          << parameters.lint_command >>
    - when:
        condition: << parameters.runner >>
        steps:
        - self_hosted_save_cache:
            key: << parameters.package_name >>-lint-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_lint_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
            path1: << parameters.package_name >>/.eslintcache
            cache_title: save lint cache
    - when:
        condition:
          not: << parameters.runner >>
        steps:
        - save_cache:
            key: << parameters.package_name >>-lint-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_lint_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.yarnlock_path >>" }}
            paths:
            - << parameters.package_name >>/.eslintcache

  cached_checkout_writable:
    description: |
      Checkout wiz (at working dir) and allow push to remote
    parameters:
      hostname:
        type: string
        default: gitwiz
      git_user:
        type: string
        default: CircleCI
      git_email:
        type: string
        default: "circleci@wiz.io"
      remote_name:
        type: string
      cache_version:
        default: v3
        type: string
    steps:
    - cached_checkout:
        cache_version: << parameters.cache_version >>
    - install_single_ssh_key:
        fingerprint: "94:dd:d1:69:e4:16:11:2c:f4:66:2c:f4:16:43:ae:55"
        host: << parameters.hostname >>
    - run:
        name: clone wiz
        command: |
          git remote add << parameters.remote_name >> git@<< parameters.hostname >>:wiz-sec/wiz.git
          git config user.email "<< parameters.git_email >>"
          git config user.name "<< parameters.git_user >>"

  wizcli-gpg-signing:
    description: "Sign a file with GPG private key"
    parameters:
      file_name: *type_str
      gpg_secret_id: *type_str
    steps:
    - run:
        name: "GPG Signing"
        environment:
          FILE_NAME: << parameters.file_name >>
          GPG_SECRET_ID: << parameters.gpg_secret_id >>
        command: bash .circleci/scripts/wizcli_gpg_signing.sh

  wizcli-prepare-files-for-upload:
    description: "Prepare WizCLI files before release"
    parameters:
      file_name: *type_str
      gpg_secret_id: *type_str
    steps:
    - run:
        name: Create sha256 files and modify file names
        environment:
          FILE_NAME: << parameters.file_name >>
          GPG_SECRET_ID: << parameters.gpg_secret_id >>
          GIT_REVISION: << pipeline.git.revision >>
        command: bash .circleci/scripts/wizcli_prepare_files_for_upload.sh

  wizcli-upload-files-to-global-bucket:
    description: "Upload all WizCLI artifacts to << parameters.bucket_name >>"
    parameters:
      file_name: *type_str
      bucket_name: *type_str
    steps:
    - run:
        name: Upload << parameters.file_name >> files to bucket
        environment:
          FILE_NAME: << parameters.file_name >>
          BUCKET_NAME: << parameters.bucket_name >>
        command: bash .circleci/scripts/wizcli_upload_files_to_global_bucket.sh

  ssh_install:
    parameters:
      access_group:
        type: string
        description: |
          Name of the group. supports only alpha characters + underscores
          Must have the context "deploy_key_$access_group" with requried env varaible
          Will fail if it doesn't see it
    steps:
      - run:
          name: ssh key << parameters.access_group >>
          command: bash .circleci/scripts/ssh_install.sh
          environment:
            access_group: << parameters.access_group >>

  enable_private_repo_access:
    description: |
      Enable private repo access
    steps:
    - ssh_install:
        access_group: ops
    - ssh_install:
        access_group: private_forks
    - run:
        name: set go envs
        command: bash .circleci/scripts/go_set_internal_repos.sh

  set_wiz_cache:
    description: |
      set wiz cache to the closest region
    steps:
    - clone_circleci_wiztools
    - run:
        name: set wiz cache
        command: bash /tmp/circleci-wiztools/src/scripts/wizcache_env.sh

  i18n:
    description: |
      Retrieve translation files
    parameters:
      cache_key:
        type: string
        default: v1
      runner: *type_bool_false
    steps:
      - run:
          name: i18n:extract-source
          command: cd web && task i18n:extract-source
      - when:
          condition: true
          steps:
            - when:
                condition:
                  not: << parameters.runner >>
                steps:
                  - restore_cache:
                      keys:
                        - i18n-<<parameters.cache_key>>-<< pipeline.git.branch >>-{{ checksum "/tmp/en.po" }}
                        - i18n-<<parameters.cache_key>>-<< pipeline.git.branch >>-
            - when:
                condition: << parameters.runner >>
                steps:
                  - self_hosted_restore_cache:
                      cache_title: restore i18n cache
                      key1: i18n-<<parameters.cache_key>>-<< pipeline.git.branch >>-{{ checksum "/tmp/en.po" }}
                      key2: i18n-<<parameters.cache_key>>-<< pipeline.git.branch >>-
            - run:
                name: 🌬️ i18n:translate
                # this process possible uses the cache or updates the cache folder
                command: cd web && bash scripts/i18nSync.sh && ls i18n
            - when:
                condition:
                  not: << parameters.runner >>
                steps:
                  - save_cache:
                    # taking cache key from /tmp/i18n-cache/en.po file so it will be written only on newer content
                      key: i18n-<<parameters.cache_key>>-<< pipeline.git.branch >>-{{ checksum "/tmp/i18n-cache/en.po" }}
                      paths:
                      - /tmp/i18n-cache
            - when:
                condition: << parameters.runner >>
                steps:
                  - self_hosted_save_cache:
                      key: i18n-<<parameters.cache_key>>-<< pipeline.git.branch >>-{{ checksum "/tmp/i18n-cache/en.po" }}
                      path1: /tmp/i18n-cache
                      cache_title: save i18n cache

jobs:
  join:
    executor: golang-machine-amd64-basic
    steps:
      - run:
          command: echo "no-op"
  validate-cci-config:
    working_directory: ~/project
    executor:
      name: python
      executor_size: large
    steps:
      - cached_checkout
      - wiztools/get_remote_file:
          sha256: "7dbabe30095f822ec38f5f70711ff121c26e588227da4cc05208417cfaf929cd"
          target_filepath: /home/circleci/bin/gomplate
          url: "https://github.com/hairyhenderson/gomplate/releases/download/v3.9.0/gomplate_linux-amd64"
      - wiztools/get_remote_file:
          sha256: "fdc8da76111facae4a10f3717502eeb5d78db0256ef94a2f8d53078978175d40"
          target_filepath: /tmp/cci/cci.tgz
          url: "https://github.com/CircleCI-Public/circleci-cli/releases/download/v0.1.29936/circleci-cli_0.1.29936_linux_amd64.tar.gz"
      - run:
          name: install tools
          command: |
            sudo chmod 755 /home/circleci/bin/gomplate
            tar -zvxf /tmp/cci/cci.tgz  --strip-components=1 -C /tmp/cci/
            sudo mv /tmp/cci/circleci /home/circleci/bin/circleci
      - run:
          name: Test dynamic config
          command: |
            export CIRCLECI_CLI_TOKEN=${CIRCLE_TOKEN}
            export CIRCLECI_CLI_TIMEOUT=60s
            cd .circleci
            bash test/dynamic_config.sh
      - store_artifacts:
          path: /tmp/results

  validate-proto:
    working_directory: ~/project
    executor:
      name: golang-only
      resource_class: "medium+"
    steps:
    - validate_proto

  validate-gosec:
    parameters:
      component:
        type: string
      resource_class:
        type: string
    working_directory: ~/project
    executor:
      name: golang-only
      resource_class: << parameters.resource_class >>
    steps:
    - validate_gosec:
        component: << parameters.component >>

  validate-deps:
    working_directory: ~/project
    executor: golang-only
    steps:
    - validate_deps

  validate-nativetypes:
    working_directory: ~/project
    executor: golang-only
    steps:
    - validate_nativetypes

  validate-component-registration:
    working_directory: ~/project
    executor: golang-only
    steps:
    - validate_component_registration

  validate-sql-migrations:
    working_directory: ~/project
    executor: golang-only
    steps:
    - validate_sql_migrations

# build-arm64-variant is used when the artifacts are cross-platform e.g js files etc.
  build-arm64-variant:
    parameters:
      package_name: *type_str
      tag: *type_str
    executor:
      name: golang-machine-arm64-basic
    steps:
      - cached_checkout
      - login_to_ecr
      - run:
          name: Build arm64 from amd64 image's static files
          command: |
            cd ~/project/<< parameters.package_name >>
            docker build . -f Dockerfile.arm64 -t $AWS_ECR_ACCOUNT_URL/beyond/<< parameters.package_name >>:<< parameters.tag >>-arm64 --build-arg VERSION=<< parameters.tag >>
      - push_to_ecr:
          package_name: << parameters.package_name >>
          aws_ecr_account_url: $AWS_ECR_ACCOUNT_URL
          aws_access_key: $AWS_ACCESS_KEY_ID
          aws_access_key_secret: $AWS_SECRET_ACCESS_KEY
          push_tag_only: true
          tag: << parameters.tag >>-arm64
          login_to_ecr: false
      - wiztools/install_boto3:
          executor_key: "v1"
      - run:
          name: create multiarch manifest << parameters.package_name >>
          command: |
            export PACKAGE_NAME=<< parameters.package_name >>
            export COMMIT_SHA=<< parameters.tag >>
            export PIPELINE_NUMBER=<< pipeline.number >>
            bash ~/project/.circleci/scripts/docker_create_multiarch_manifest.sh

  build-golang:
    parameters: &build_golang_parameters
      package_name: *type_str
      push_to_ecr: *type_bool_true
      push_to_netscanner_ecr: *type_bool_false
      push_to_digital_trust_gov: *type_bool_false
      push_to_auth_ecr: *type_bool_false
      push_to_acr: *type_bool_false
      build_docker_image: *type_bool_true
      # docker_env - make sure that we can run docker CLI commands in the job (good for libs)
      docker_env: *type_bool_false
      use_private_repo: *type_bool_true
      push_tag_only:
        type: boolean
        default: false
      install_chromium: *type_bool_false
      tests_need_ecr: *type_bool_false
      target:
        type: string
        default: ""
      is_multiarch: *type_bool_false
      docker_layer_caching: *type_bool_false
      extra_target_registries: *type_str_empty
      job_timeout:
        type: string
        default: "10m"
      tag:
        type: string
        default: << pipeline.git.revision >>
      replicate_image: *type_bool_true
      clone_lemminx_wiz_repo: *type_bool_false
      # set to false if you use machine but you don't need DA-deps
      da_deps: *type_bool_true
      xt:
        type: enum
        default: docker-amd64
        enum:
        - docker-amd64
        - machine-amd64
        - machine-arm64
      size:
        type: string
        default: medium
      runner_size:
        type: string
        default: small
      fips: *type_bool_false
      test_env:
        description: |
          test collaborators group
          - basic - only redis
          - dynamo - redis with dynamo
          - janus - redis with dynamo and janus
          - janus-and-kusto - redis with dynamo and janus and kusto
          - kusto - redis with dynamo and kusto
        type: enum
        default: basic
        enum:
        - basic
        - janus
        - dynamo
        - janus-and-kusto
        - kusto
        - postgres-updater
      cache_key: &build_golang_cache_key
        type: string
        default: v4
      gocache_legacy_behavior: *type_bool_false
      gocache_disable_for_tests: *type_bool_false
      go_coverage:
        type: boolean
        default: false
        description: Enable coverage report (but cancels test caching https://github.com/golang/go/issues/23565)
    working_directory: ~/project
    executor:
      name: golang-<< parameters.xt >>-<< parameters.test_env >>
      size: << parameters.size >>
    environment: &build_golang_env
      GOMODCACHE: "/tmp/go/pkg/mod"
      GOCACHE: "/tmp/go/build"
      GOCACHE_DISK_DIR: "/tmp/go-cache"
      GOCACHEPROG: "go-cacher --verbose"
      GOTOOLCHAIN: "local" # make sure we use whatever go version that is on the image
      GOCACHE_CACHE_KEY: << pipeline.parameters.gocache_key >>
    steps:
    - when: &disable_s3_cache
        condition: << parameters.gocache_legacy_behavior >>
        steps:
          - run:
              name: Disable S3 cache
              command: echo 'unset GOCACHEPROG' >> $BASH_ENV
    - when: &disable_s3_test_cache
        condition: << parameters.gocache_disable_for_tests >>
        steps:
          - run:
              name: Disable test cache
              command: echo 'export DISABLE_TEST_CACHE="true"' >> $BASH_ENV
    - when: &enable_fips
        condition: << parameters.fips >>
        steps:
          - run:
              name: 🛡️ FIPS
              command: |
                echo 'export FIPS=true' >> $BASH_ENV
    - cached_checkout
    - aws-cli/configure: &aws_cli_configure
        aws-region: AWS_REGION
      # If it's a machine executor (when we can't run tests in a container), don't setup remote docker,
      # and install dependencies for diskanalayzer tests.
    - write_cache_key_files
    - when:
        condition:
          and:
            - matches: # machine executors already have docker available
                pattern: ^(docker-.*)$
                value: << parameters.xt >>
            - or:
              - << parameters.build_docker_image >>
              - << parameters.docker_env >>
        steps:
        - setup_remote_docker:
            docker_layer_caching: << parameters.docker_layer_caching >>
    - restore_cache: &build_golang_restore_go_mod_cache
        # restore go mod cache
        keys:
          - go-mod-<<parameters.cache_key>>-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-{{ checksum "<< parameters.package_name>>/go.mod" }}
          - go-mod-<<parameters.cache_key>>-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-
    - run: &setup_go_bootstrap_tools
        name: Setup tools
        command: bash .circleci/scripts/bootstrap_go_builder.sh
    - when: &gocache_legacy_behavior
        condition: << parameters.gocache_legacy_behavior >>
        steps:
        - restore_cache:
            # restore go build cache
            keys:
                # any build that was built on develop today
            - go-build-<< parameters.fips >>-<<parameters.cache_key>>-{{ arch }}-<< parameters.package_name >>-{{ checksum "/tmp/week"}}-{{ checksum "/tmp/day" }}
                # any build that was built on develop this week
            - go-build-<< parameters.fips >>-<<parameters.cache_key>>-{{ arch }}-<< parameters.package_name >>-{{ checksum "/tmp/week"}}-
    - when: &use_private_repo
        condition:
          equal: [true, << parameters.use_private_repo >>]
        steps:
        - enable_private_repo_access
    - when: &clone_lemminx_wiz_repo
        condition:
          equal: [true, << parameters.clone_lemminx_wiz_repo >>]
        steps:
        - clone_lemminx_wiz_repo
    - run: &go_mod_download
        name: Go mod download
        command: cd << parameters.package_name >> && go mod download
    - when:
        condition:
          and:
          - matches:
              pattern: ^(.*-amd64)$
              value: << parameters.xt >>
          - not: << parameters.fips >>
        steps:
        - when:
            condition:
              and:
                - << parameters.da_deps >>
                - matches:
                    pattern: ^(machine-.*)$
                    value: << parameters.xt >>
            steps:
            - run:
                name: DA-deps
                command: bash .circleci/scripts/install_diskanalyzerlib_deps.sh
        - when:
            condition:
              equal: [<< parameters.test_env >>, janus]
            steps:
            - run:
                name: Waiting for JanusGraph to be ready
                command: bash .circleci/scripts/wait_janus.sh
        - when:
            condition:
              equal: [<< parameters.install_chromium >>, true]
            steps:
            - run:
                name: Installing Chromium
                command: |
                  sudo apt update
                  wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                  sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
        - when:
            condition:
              equal: [true, << parameters.tests_need_ecr >>]
            steps:
              - login_to_ecr
        - run:
            name: 🧪🧪🧪 Run Tests
            environment:
              TESTS_USE_EXTERNAL_REDIS: '1'
              TESTS_USE_EXTERNAL_DB: '1'
              TESTS_EXTERNAL_DB_PORT: '5432'
              TESTS_USE_EXTERNAL_GRAPHDB: '1'
              TESTS_EXTERNAL_GRAPHDB_PORT: '8182'
              TESTS_USE_EXTERNAL_DYNAMODB: '1'
              TESTS_EXTERNAL_DYNAMODB_PORT: '8000'
              TESTS_USE_EXTERNAL_KUSTO: '1'
              TESTS_EXTERNAL_KUSTO_PORT: '8080'
            command: |
              echo "GOCACHEPROG=${GOCACHEPROG}"
              export GO_COVERAGE="<< parameters.go_coverage >>"
              cd << parameters.package_name >> && task test
        - store_test_results:
            path: /tmp/test-results
        - store_artifacts:
            path: /tmp/test-results
    - when: &build_golang_post_test_steps
        condition: true # The only reason to use when here is to reuse this block in other jobs
        steps:
          - run:
              name: chown go mod cache
              command: sudo mkdir -p $GOMODCACHE && sudo chown -R circleci:circleci $GOMODCACHE
          - save_cache:
              name: save << parameters.package_name >> go mod cache
              key: go-mod-<<parameters.cache_key>>-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-{{ checksum "<< parameters.package_name>>/go.mod" }}
              paths:
              - /tmp/go/pkg/mod
    - when:
        condition:
          and:
          - matches:
              pattern: ^(.*-amd64)$
              value: << parameters.xt >>
          - not: << parameters.fips >>
        steps:
        - build_golang: &buildgolang
            package_name: << parameters.package_name >>
            tag: << parameters.tag >>
            build_docker_image: << parameters.build_docker_image >>
            scan_image: true
            scan_image_policy_name: "Wiz policy,high-audit-policy"
            push_to_ecr: << parameters.push_to_ecr >>
            push_tag_only: << parameters.push_tag_only >>
            replicate_image: << parameters.replicate_image >>
            push_to_acr: << parameters.push_to_acr >>
            extra_target_registries: << parameters.extra_target_registries >>
            job_timeout: << parameters.job_timeout >>
            push_to_netscanner_ecr: << parameters.push_to_netscanner_ecr >>
            push_to_digital_trust_gov: << parameters.push_to_digital_trust_gov >>
            push_to_auth_ecr: << parameters.push_to_auth_ecr >>
            fips: << parameters.fips >>
            cache_key: << parameters.cache_key >>
            gocache_legacy_behavior: << parameters.gocache_legacy_behavior >>
    - when:
        condition:
          matches:
            pattern: ^(.*-arm64)$
            value: << parameters.xt >>
        steps:
        - build_golang:
            <<: *buildgolang
            tag: <<parameters.tag>>-arm64
            scan_image: false
            push_tag_only: true
    - when:
        condition: << parameters.fips >>
        steps:
        - build_golang:
            <<: *buildgolang
            tag: <<parameters.tag>>-fips
            scan_image: true
            push_tag_only: true
            scan_image_policy_name: "Wiz policy,high-audit-policy-fips"

    - when:
        condition:
          and:
          -  << parameters.is_multiarch >>
          - matches:
              pattern: ^(.*-amd64)$
              value: << parameters.xt >>
          - matches:
              pattern: "^(develop|integration.*)$"
              value: << pipeline.git.branch >>
        steps:
        - run:
            name: create multiarch manifest << parameters.package_name >>
            command: |
              export PACKAGE_NAME=<< parameters.package_name >>
              export COMMIT_SHA=<< parameters.tag >>
              export EXTRA_TARGET_REGISTRIES=<< parameters.extra_target_registries >>
              export PUSH_TO_ACR=<< parameters.push_to_acr >>
              export PIPELINE_NUMBER=<< pipeline.number >>
              bash .circleci/scripts/docker_create_multiarch_manifest.sh
        - run:
            name: scan and tag multiarch image
            command: |
              export PACKAGE_NAME=<< parameters.package_name >>
              export TAG=<< parameters.tag >>
              export REGISTRY_URL="$AWS_ECR_ACCOUNT_URL/beyond"
              export WIZ_POLICY_NAME="Wiz policy,high-audit-policy"
              bash .circleci/scripts/wizcli_scan_and_tag_multiarch.sh

  build-golang-runner:
    parameters: *build_golang_parameters
    executor:
      name: golang-runner-<< parameters.test_env >>
      size: << parameters.runner_size >>
      arch: << parameters.xt >>
    environment: *build_golang_env
    steps:
    - when: *disable_s3_cache
    - when: *disable_s3_test_cache
    - when: *enable_fips
    - cached_checkout:
        runner: true
    - aws-cli/configure: *aws_cli_configure
    - check_for_rerun_with_ssh
    - write_cache_key_files
    - self_hosted_restore_cache:
        key1: go-mod-<<parameters.cache_key>>-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-{{ checksum "<< parameters.package_name>>/go.mod" }}
        key2: go-mod-<<parameters.cache_key>>-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-
        cache_title: Restore go mod
    - login_to_ecr
    - run: *setup_go_bootstrap_tools
    - when:
        condition: << parameters.gocache_legacy_behavior >>
        steps:
        # restore go build cache
        - self_hosted_restore_cache:
            cache_title: Restore go build cache
            # any build that was built on develop today
            key1: go-build-<< parameters.fips >>-<<parameters.cache_key>>-{{ arch }}-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-{{ checksum "/tmp/day" }}
            # any build that was built on develop this week
            key2: go-build-<< parameters.fips >>-<<parameters.cache_key>>-{{ arch }}-<< parameters.package_name >>-{{ checksum "/tmp/week"}}-
    - when: *use_private_repo
    - when: *clone_lemminx_wiz_repo
    - run: *go_mod_download
    - when:
        condition:
          and:
          - matches:
              pattern: ^(.*-amd64)$
              value: << parameters.xt >>
          - not: << parameters.fips >>
        steps:
        - when:
            condition:
              and:
                - << parameters.da_deps >>
                - matches:
                    pattern: ^(machine-.*)$
                    value: << parameters.xt >>
            steps:
            - run:
                name: DA-deps
                command: bash .circleci/scripts/install_diskanalyzerlib_deps.sh
        - when:
            condition:
              equal: [<< parameters.test_env >>, janus]
            steps:
            - run:
                name: Waiting for JanusGraph to be ready
                command: bash .circleci/scripts/wait_janus.sh
        - when:
            condition:
              equal: [<< parameters.install_chromium >>, true]
            steps:
            - run:
                name: Installing Chromium
                command: |
                  sudo apt update
                  wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                  sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
        - when:
            condition:
              equal: [true, << parameters.tests_need_ecr >>]
            steps:
              - login_to_ecr
        - run:
            name: 🧪🧪🧪 Run Tests
            environment:
              TESTS_USE_EXTERNAL_REDIS: '1'
              TESTS_USE_EXTERNAL_DB: '1'
              TESTS_EXTERNAL_DB_PORT: '5432'
              TESTS_USE_EXTERNAL_GRAPHDB: '1'
              TESTS_EXTERNAL_GRAPHDB_PORT: '8182'
              TESTS_USE_EXTERNAL_DYNAMODB: '1'
              TESTS_EXTERNAL_DYNAMODB_PORT: '8000'
              TESTS_USE_EXTERNAL_KUSTO: '1'
              TESTS_EXTERNAL_KUSTO_PORT: '8080'
            command: |
              echo "GOCACHEPROG=${GOCACHEPROG}"
              cd << parameters.package_name >> && task test
        - store_test_results:
            path: /tmp/test-results
        - store_artifacts:
            path: /tmp/test-results
    - when:
        condition: true # The only reason to use when here is to reuse this block in other jobs
        steps:
          - run:
              name: chown go mod cache
              command: sudo mkdir -p $GOMODCACHE && sudo chown -R circleci:circleci $GOMODCACHE
          - self_hosted_save_cache:
              cache_title: save << parameters.package_name >> go mod cache
              key: go-mod-<<parameters.cache_key>>-<< parameters.package_name >>-{{ checksum "/tmp/week" }}-{{ checksum "<< parameters.package_name>>/go.mod" }}
              path1: /tmp/go/pkg/mod
    - when:
        condition:
          and:
          - matches:
              pattern: ^(.*-amd64)$
              value: << parameters.xt >>
          - not: << parameters.fips >>
        steps:
        - build_golang:
            <<: *buildgolang
            runner_enabled: true
    - when:
        condition:
          matches:
            pattern: ^(.*-arm64)$
            value: << parameters.xt >>
        steps:
        - build_golang:
            <<: *buildgolang
            tag: <<parameters.tag>>-arm64
            scan_image: false
            push_tag_only: true
    - when:
        condition: << parameters.fips >>
        steps:
        - build_golang:
            <<: *buildgolang
            tag: <<parameters.tag>>-fips
            scan_image: false
            push_tag_only: true
    - when:
        condition:
          and:
          -  << parameters.is_multiarch >>
          - matches:
              pattern: ^(.*-amd64)$
              value: << parameters.xt >>
          - matches:
              pattern: "^(develop|integration.*)$"
              value: << pipeline.git.branch >>
        steps:
        - run:
            name: create multiarch manifest << parameters.package_name >>
            command: |
              export PACKAGE_NAME=<< parameters.package_name >>
              export COMMIT_SHA=<< parameters.tag >>
              export EXTRA_TARGET_REGISTRIES=<< parameters.extra_target_registries >>
              export PUSH_TO_ACR=<< parameters.push_to_acr >>
              export PIPELINE_NUMBER=<< pipeline.number >>
              bash .circleci/scripts/docker_create_multiarch_manifest.sh
        - run:
            name: scan and tag multiarch image
            command: |
              export PACKAGE_NAME=<< parameters.package_name >>
              export TAG=<< parameters.tag >>
              export REGISTRY_URL="$AWS_ECR_ACCOUNT_URL/beyond"
              export WIZ_POLICY_NAME="Wiz policy,high-audit-policy"
              bash .circleci/scripts/wizcli_scan_and_tag_multiarch.sh

  build-golang-justbuild:
    parameters:
      package_name: *type_str
      resource_class:
        type: string
        default: medium
      cache_key: *build_golang_cache_key
    working_directory: ~/project
    executor:
      name: golang-only
      resource_class: << parameters.resource_class >>
    environment: *build_golang_env
    steps:
    - cached_checkout
    - write_cache_key_files
    - aws-cli/configure:
        aws-region: AWS_REGION
    - enable_private_repo_access
    - restore_cache: *build_golang_restore_go_mod_cache
    - run:
        name: deps
        command: cd << parameters.package_name >> && go get ./...
    - when: *build_golang_post_test_steps
    - run:
        name: 🔨 Build
        command: cd << parameters.package_name >> && task build
  validate-operator-generated:
    working_directory: ~/project
    executor: golang-only
    environment: *build_golang_env
    parameters:
      package_name: *type_str
      cache_key: *build_golang_cache_key
      validate_local_chart_generation:
        <<: *type_bool_false
        description: |
          Relevant only for charts that are pushed to the same repo as the component
    steps:
      - cached_checkout
      - enable_private_repo_access
      - write_cache_key_files
      - restore_cache: *build_golang_restore_go_mod_cache
      - run:
          name: Generate
          command: |
            cd << parameters.package_name >>
            make generate
      - when:
          condition:
            equal: [ true, << parameters.validate_local_chart_generation >> ]
          steps:
            - run:
                name: Build chart
                command: |
                  cd << parameters.package_name >>
                  task build-chart
      - run:
          name: Validate no changes
          command: |
            if [[ $(git diff --name-only | grep -v "go.sum" | grep -v "go.mod") != '' ]]; then
              echo 'Diff is:'
              echo "$(git diff --name-only | grep -v "go.sum" | grep -v "go.mod")"
              exit 1
            fi
      - when: *build_golang_post_test_steps

  validate-gqlgen:
    parameters: &validate_gqlgen_parameters
      component:
        type: string
      size:
        type: string
      job_timeout:
        type: string
        default: "10m"
      gocache_legacy_behavior: *type_bool_false
    executor:
      name: golang-only
      resource_class: << parameters.size >>
    environment: *build_golang_env
    steps:
      - when: *disable_s3_cache
      - validate_gqlgen:
          component: << parameters.component >>
          job_timeout: << parameters.job_timeout >>

  validate-gqlgen-runner:
    parameters: *validate_gqlgen_parameters
    executor:
      name: golang-runner-basic
      size: << parameters.size >>
    environment: *build_golang_env
    steps:
      - when: *disable_s3_cache
      - validate_gqlgen:
          component: << parameters.component >>
          job_timeout: << parameters.job_timeout >>
          runner: true

  validate-gqlgen-backoffice:
    working_directory: ~/project
    executor: golang-only-xlarge
    environment: *build_golang_env
    steps:
      - validate_gqlgen:
          gqlgen: gqlgen-backoffice

  build-utils:
    parameters:
      package_name: *type_str
      run_tests: *type_bool_false
    working_directory: ~/project
    executor: golang-only
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
    - cached_checkout
    - aws-cli/configure:
        aws-region: AWS_REGION
    - enable_private_repo_access
    - login_to_ecr
    - when:
        condition: << parameters.run_tests >>
        steps:
        - run:
            name: 🧪🧪🧪 Run Tests
            command: |
              cd << parameters.package_name >> && task test
    - run:
        name: 🐳🐳🐳 Build Docker image
        command: cd << parameters.package_name >> && task REPO="$AWS_ECR_ACCOUNT_URL/"
          TAG="${CIRCLE_SHA1}" build-docker
    - scan_image_with_wizcli:
        image: "$AWS_ECR_ACCOUNT_URL/beyond/<< parameters.package_name >>:${CIRCLE_SHA1}"
    - when:
        condition: true
        steps:
            # Push package to wiz private ECR = beyond
        - push_to_ecr:
            package_name: << parameters.package_name >>
            aws_ecr_account_url: $AWS_ECR_ACCOUNT_URL
            aws_access_key: $AWS_ACCESS_KEY_ID
            aws_access_key_secret: $AWS_SECRET_ACCESS_KEY
            # Push package to wiz private gov ECR = wiz-gov
            # Push package to wiz private fedtest ECR = wiz-fedtest
        - replicate_image:
            package_name: << parameters.package_name >>
            tag: << pipeline.git.revision >>
            target_azure: true
            target_netscanner_gov: false
            target_auth_gov: false
            target_netscanner_fedtest: false
            target_netscanner_fedstg1: false
            target_netscanner_fedstg2: false
            target_netscanner_fedramp: false
            target_auth_fedtest: false
            target_auth_fedramp: false
            target_auth_fedstg1: false
            target_auth_fedstg2: false
        - tag_image_with_wizcli:
            image: "$AWS_ECR_ACCOUNT_URL/beyond/<< parameters.package_name >>:${CIRCLE_SHA1}"
            package_name: << parameters.package_name >>

  test-libs:
    parameters:
    working_directory: ~/project
    executor: golang-with-dynamo-xlarge
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
    - cached_checkout
    - enable_private_repo_access
    - run:
        name: Waiting for DynamoDB to be ready
        command: |
          for i in `seq 1 100`;
          do
            nc -z localhost 8000 && echo Success && exit 0
            echo -n .
            sleep 1
          done
          echo Failed waiting for DynamoDB && exit 1
    - run:
        name: Create libs checksum
        command: |
          find *lib/*.mod | md5sum > libschecksum.txt
    - restore_cache:
        keys:
        - go-mod-v5-libs-{{ checksum "libschecksum.txt" }}
        - go-mod-v5-libs-
    - run:
        name: Test libs
        command: |
          for d in */ ; do
              if [[ "$d" =~ ^.*lib ]]; then
                  if [[ "$d" =~ "diskanalyzerlib" ]]; then
                    continue
                  fi
                  if [[ "$d" =~ "datascanlib" ]]; then
                    continue
                  fi
                  echo "pushd $d && TESTS_USE_EXTERNAL_REDIS=1 TESTS_USE_EXTERNAL_DB=1 TESTS_EXTERNAL_DB_PORT=5432 TESTS_USE_EXTERNAL_GRAPHDB=1 TESTS_EXTERNAL_GRAPHDB_PORT=8182 TESTS_USE_EXTERNAL_DYNAMODB=1 TESTS_EXTERNAL_DYNAMODB_PORT=8000 task test && popd" >> commands.txt
              fi
          done
          parallel -j 8 < commands.txt
    - save_cache:
        key: go-mod-v5-libs-{{ checksum "libschecksum.txt" }}
        paths:
        - /go/pkg/mod

  web-lint:
    executor:
      name: node
      resource_class: xlarge
    steps:
    - cached_checkout
    - cached_yarn_install:
        package_name: web
        yarnlock_path: web/yarn.lock
    - ssh_install:
        access_group: docs
    - run:
        name: Codegen
        command: cd web && task codegen
    - cached_lint:
        package_name: web
        yarnlock_path: web/yarn.lock

  web-lint-runner:
    executor:
      name: web-runner
      size: medium
      image: wiz-ci-node
      tag: << pipeline.parameters.wiz_ci_node_tag >>
    steps:
    - checkout_sparse: &web_checkout_sparse
       component: web
       checkout_folders: "/gqlgen /.circleci/scripts"
       checkout_files: "SharedNodeTaskfile.yml"
    - set_wiz_cache
    - clone_circleci_wiztools
    - cached_yarn_install: &web_yarn_cache
        package_name: web
        yarnlock_path: web/yarn.lock
        runner: true
    - ssh_install:
        access_group: docs
    - run:
        name: Codegen
        command: cd web && task codegen
    - cached_lint: *web_yarn_cache

  digital-trust-web-lint-runner:
    executor:
      name: web-runner
      size: medium
      image: wiz-ci-node
      tag: << pipeline.parameters.wiz_ci_node_tag >>
    steps:
    - checkout_sparse:
       component: digital-trust-web
       checkout_folders: "/gqlgen /.circleci/scripts"
       checkout_files: "SharedNodeTaskfile.yml"
    - set_wiz_cache
    - clone_circleci_wiztools
    - cached_yarn_install: &digital_trust_yarn_cache
        package_name: digital-trust-web
        yarnlock_path: digital-trust-web/yarn.lock
        runner: true
    - run:
        name: Codegen
        command: cd digital-trust-web && task codegen
    - cached_lint: *digital_trust_yarn_cache

  api-gateway-lint:
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    working_directory: /mnt/ramdisk/project
    executor: node
    steps:
    - cached_checkout
    - cached_yarn_install:
        package_name: api-gateway
    - run:
        name: Codegen
        command: cd api-gateway && task codegen
    - run:
        name: Lint
        no_output_timeout: 30m
        command: cd api-gateway && task lint

  forensicspackage-auth-serverless-lint:
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    working_directory: /mnt/ramdisk/project
    executor: node
    steps:
    - cached_checkout
    - cached_yarn_install:
        package_name: forensicspackage-auth-serverless
    - run:
        name: Lint
        no_output_timeout: 30m
        command: cd forensicspackage-auth-serverless && task lint

  gqlgen-lint:
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    working_directory: /mnt/ramdisk/project
    executor: node
    steps:
    - cached_checkout
      # Use the same node_modules cache as the regular web build
    - cached_yarn_install:
        package_name: gqlgen
    - run:
        name: Lint
        no_output_timeout: 30m
        command: cd gqlgen && task lint

  gqlgen-backoffice-lint:
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    working_directory: /mnt/ramdisk/project
    executor: node
    steps:
    - cached_checkout
    - cached_yarn_install:
        package_name: gqlgen-backoffice
    - run:
        name: Lint
        no_output_timeout: 30m
        command: cd gqlgen-backoffice && task lint

  web-integration-build:
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    working_directory: /mnt/ramdisk/project
    executor:
      name: cypress-web
      size: 2xlarge
    steps:
    - checkout_sparse: *web_checkout_sparse
    - set_wiz_cache
    - cached_yarn_install: &cached_yarn_install
        package_name: web
        yarnlock_path: web/yarn.lock
    - ssh_install:
        access_group: docs
    - run:
        name: i18n extract source
        command: |
          cd web
          task i18n:extract-source
    - run: &run_codegen_build
        name: build
        command: |
          cd web
          task codegen
          task build -- --sourcemap
    - run: &keys_cache_web_build
        name: prepare keys for build cache
        command: |
          echo $CIRCLE_WORKFLOW_WORKSPACE_ID > CIRCLE_WORKFLOW_WORKSPACE_ID.txt
    - save_cache:
        name: save web build
        key: web-build-{{ checksum "CIRCLE_WORKFLOW_WORKSPACE_ID.txt" }}
        paths:
          - web/build
          - web/src/@generated
          - web/schema.generated.graphql

  web-integration-tests:
    working_directory: /mnt/ramdisk/project
    executor:
      name: cypress-web
      size: 2xlarge
    parallelism: 14
    parameters:
      package_name:
        type: string
        default: web
      key:
        type: string
        default: v103
    steps:
    - checkout_sparse: *web_checkout_sparse
    - set_wiz_cache
    - run:
        name: prepare keys for build cache
        command: |
          echo $CIRCLE_WORKFLOW_WORKSPACE_ID > web/CIRCLE_WORKFLOW_WORKSPACE_ID.txt
    - restore_cache:
        keys:
          - web-build-{{ checksum "web/CIRCLE_WORKFLOW_WORKSPACE_ID.txt" }}
    - run: *yarn_cache_file_key
    - restore_cache:
        keys:
          - node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.package_name>>/yarn.lock" }}
          - node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>
    - run:
        name: Integration tests
        command: |
          cd web
          export CYPRESS_CACHE_FOLDER=$(pwd)/.cache/cypress
          export YARN_CACHE_FOLDER=$(pwd)/.yarn/cache
          task install
          task ci:test:integration

  web-integration-build-runner:
    working_directory: /mnt/ramdisk/project
    executor:
      name: web-runner
      size: medium
    steps:
    - checkout_sparse: *web_checkout_sparse
    - set_wiz_cache
    - clone_circleci_wiztools
    - cached_yarn_install:
        package_name: web
        yarnlock_path: web/yarn.lock
        runner: true
    - ssh_install:
        access_group: docs
    - run:
        name: i18n extract source
        command: |
          cd web
          task i18n:extract-source
    - run: *run_codegen_build
    - run: *keys_cache_web_build
    - self_hosted_save_cache: &save_web_build_cache
        cache_title: save web build
        key: web-build-{{ checksum "CIRCLE_WORKFLOW_WORKSPACE_ID.txt" }}
        path1: web/build
        path2: web/src/@generated
        path3: web/schema.generated.graphql
  # - run: *run_cypress_integration_tests

  web-integration-tests-runner:
    working_directory: /mnt/ramdisk/project
    executor:
      name: web-runner
      size: large
    parallelism: 14
    parameters:
      package_name:
        type: string
        default: web
      key:
        type: string
        default: v103
      yarnlock_path:
        type: string
        default: yarn.lock
    steps:
    - checkout_sparse: *web_checkout_sparse
    - set_wiz_cache
    - clone_circleci_wiztools
    - run:
        name: prepare keys for build cache
        command: |
          echo $CIRCLE_WORKFLOW_WORKSPACE_ID > web/CIRCLE_WORKFLOW_WORKSPACE_ID.txt
    - self_hosted_restore_cache:
        key1: web-build-{{ checksum "web/CIRCLE_WORKFLOW_WORKSPACE_ID.txt" }}
        cache_title: Restore web build
    - run: *yarn_cache_file_key
    - self_hosted_restore_cache:
        key1: node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>-{{ checksum "<< parameters.package_name>>/<< parameters.yarnlock_path >>" }}
        key2: node-<< parameters.key >>-{{ checksum "/tmp/<< parameters.package_name >>_yarn_cache_key" }}-{{ arch }}-<< parameters.package_name >>
        cache_title: restore yarn and node_modules cache
    - run:
        name: Integration tests
        command: |
          cd web
          export CYPRESS_CACHE_FOLDER=$(pwd)/.cache/cypress
          export YARN_CACHE_FOLDER=$(pwd)/.yarn/cache
          task install
          task ci:test:integration

  build-node-docker:
    working_directory: /mnt/ramdisk/project
    parameters: &build_node_docker_parameters
      package_name: *type_str
      resource_class:
        type: string
        default: large
      fips: *type_bool_false
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    executor:
      name: node
      resource_class: << parameters.resource_class >>
    steps:
    - setup_remote_docker
    - cached_checkout
    - ssh_install:
        access_group: docs
    - aws-cli/configure:
        aws-region: AWS_REGION
    - cached_yarn_install:
        package_name: << parameters.package_name >>
    - when: &build_node_docker_when_not_forensicspackage_auth_serverless
        condition:
          not:
            equal: [forensicspackage-auth-serverless, << parameters.package_name >>]
        steps:
          - run:
              name: Codegen
              command: |
                cd << parameters.package_name >>
                task codegen
    - when: &build_node_docker_when_web_i18n
        condition:
          equal: [web, << parameters.package_name >>]
        steps:
          - i18n
    - run: &build_node_docker_build
        name: Build
        command: |
          cd << parameters.package_name >>
          task build
    - login_to_ecr
    - when: &build_node_docker_when_not_fips
        condition:
          not: << parameters.fips >>
        steps:
          - build_node_docker:
              package_name: << parameters.package_name >>
              tag: << pipeline.git.revision >>
    - when: &build_node_docker_when_fips
        condition: << parameters.fips >>
        steps:
          - build_node_docker:
              package_name: << parameters.package_name >>
              tag: << pipeline.git.revision >>-fips
              fips: << parameters.fips >>
    - when: &build_node_docker_web_digital_tust_web
        condition:
          and:
          - or:
            - equal: [web, << parameters.package_name >>]
            - equal: [digital-trust-web, << parameters.package_name >>]
          - true
        steps:
        - run:
            name: push << parameters.package_name >>-cdn-global
            command: |
                COMPRESSED_PATH=${CIRCLE_WORKING_DIRECTORY}/<< parameters.package_name >>/compressed
                mkdir -p ${COMPRESSED_PATH}
                tar cfz ${COMPRESSED_PATH}/${CIRCLE_SHA1}.tar.gz -C ${CIRCLE_WORKING_DIRECTORY}/<< parameters.package_name >>/build .
                aws s3 cp ${COMPRESSED_PATH}/${CIRCLE_SHA1}.tar.gz s3://<<parameters.package_name>>-cdn-global/compressed/${CIRCLE_SHA1}.tar.gz
    - when: &build_node_docker_when_browser_extension
        condition:
          and:
          - or:
            - equal: [browser-extension, << parameters.package_name >>]
          - true
        steps:
        - run:
            name: Push browser-extension zip to s3://prod-ci-artifacts/browser-extension
            command: aws s3 sync ${CIRCLE_WORKING_DIRECTORY}/<< parameters.package_name >>/build s3://prod-ci-artifacts/browser-extension/${CIRCLE_SHA1}
              --exclude="*" --include="*.zip"
    - when: &build_node_docker_when_web_dt_browser_extension
        condition:
          and:
          - or:
            - equal: [web, << parameters.package_name >>]
            - equal: [digital-trust-web, << parameters.package_name >>]
            - equal: [browser-extension, << parameters.package_name >>]
          - true
        steps:
        - run:
            name: push source map to third parties
            command: cd << parameters.package_name >> && export GIT_VERSION="${CIRCLE_SHA1}" && task ci:upload-sourcemaps

    - when: &build_node_docker_when_deployable
          # Only for web builds on feature branches ("wz-1234-jira-ticket-name") and not "develop" and others
        condition:
          and:
              # When running this job with the web package because of changes other than web (e.g. gqlgen), we don't need to be deployed to netlify.
          - equal: [true, << pipeline.parameters.web-only >>]
          - or:
            - equal: [web, << parameters.package_name >>]
            - equal: [digital-trust-web, << parameters.package_name >>]
          - matches:
              pattern: ^([^/]+/)?(wz|WZ)-\d+.*$
              value: << pipeline.git.branch >>
        steps:
        - run:
            name: Deploy Preview to Netlify
            command: |
              cd << parameters.package_name >>
              task ci:deploy-preview
    - when: &build_node_docker_when_feature_branches
          # Only for web builds on feature branches ("wz-1234-jira-ticket-name") and not "develop" and others
        condition:
          and:
              # When running this job with the web package because of changes other than web (e.g. gqlgen), we don't need to be deployed to netlify.
          - equal: [true, << pipeline.parameters.web-only >>]
          - equal: [web, << parameters.package_name >>]
          - matches:
              pattern: ^([^/]+/)?(wz|WZ)-\d+.*$
              value: << pipeline.git.branch >>
        steps:
        - run:
            name: Deploy Storybook Preview to Netlify
            command: |
              cd << parameters.package_name >>
              task ci:deploy-storybook

    - when: &build_node_docker_web_when_develop
          # Only for web builds on develop
        condition:
          and:
          # When running this job with the web package because of changes other than web (e.g. gqlgen), we don't need to be deployed to netlify.
          - equal: [true, << pipeline.parameters.web-only >>]
          - equal: [web, << parameters.package_name >>]
          - matches:
              pattern: ^develop$
              value: << pipeline.git.branch >>
        steps:
        - run:
            name: Deploy Storybook to Netlify
            command: |
              cd << parameters.package_name >>
              task ci:deploy-storybook


  build-node-docker-runner:
    working_directory: /mnt/ramdisk/project
    parameters:
      package_name: *type_str
      fips: *type_bool_false
    executor:
      name: web-runner
      size: medium
      image: wiz-ci-node
      tag: << pipeline.parameters.wiz_ci_node_tag >>
    steps:
    - checkout_sparse:
       component: "/<< parameters.package_name >>"
       checkout_folders: "/web /gqlgen /.circleci/ /build-infra /proto"
       checkout_files: "SharedNodeTaskfile.yml"
    - set_wiz_cache
    - clone_circleci_wiztools
    - ssh_install:
        access_group: docs
    - aws-cli/configure:
        aws-region: AWS_REGION
    - cached_yarn_install:
        package_name: << parameters.package_name >>
        yarnlock_path: << parameters.package_name >>/yarn.lock
        runner: true
    - when: *build_node_docker_when_not_forensicspackage_auth_serverless
    - when:
        <<: *build_node_docker_when_web_i18n
        steps:
          - i18n:
              runner: true
    - run: *build_node_docker_build
    - login_to_ecr
    - when:
        <<: *build_node_docker_when_not_fips
        steps:
          - build_node_docker:
              package_name: << parameters.package_name >>
              tag: << pipeline.git.revision >>
              runner: true
              login_to_ecr: false
    - when:
        <<: *build_node_docker_when_fips
        steps:
          - build_node_docker:
              package_name: << parameters.package_name >>
              tag: << pipeline.git.revision >>-fips
              fips: << parameters.fips >>
              runner: true
              login_to_ecr: false
    - when: *build_node_docker_web_digital_tust_web
    - when: *build_node_docker_when_browser_extension
    - when: *build_node_docker_when_web_dt_browser_extension
    - when: *build_node_docker_when_deployable
    - when: *build_node_docker_when_feature_branches
    - when: *build_node_docker_web_when_develop

  lint-lib-node:
    # This is a RAMDisk directory - It does all IO operations on the RAM making everything run faster!
    # Read more about it here: https://support.circleci.com/hc/en-us/articles/360054908812-Speed-up-steps-using-a-RAM-disk
    working_directory: /mnt/ramdisk/project
    parameters:
      package_name: *type_str
      size: *type_str
    executor:
      name: node
      resource_class: << parameters.size >>
    steps:
    - cached_checkout
    - cached_yarn_install:
        package_name: << parameters.package_name >>
    - run:
        name: Lint
        no_output_timeout: 30m
        command: cd << parameters.package_name >> && task lint

  update-gql-schema:
    working_directory: ~/project
    executor: golang-python
    steps:
    - cached_checkout
    - enable_private_repo_access
    - update_gql_schema

  update-backoffice-gql-schema:
    working_directory: ~/project
    executor: golang-python
    steps:
    - cached_checkout
    - enable_private_repo_access
    - update_backoffice_gql_schema

  validate-gql-schema:
    working_directory: ~/project
    executor: golang-only-large
    parameters:
      variant:
        type: string
        default: test-eu3
    steps:
    - cached_checkout
    - run: &override_gql_variant_by_pr
        name: Set graph variant
        command: |
          if [ -n $CIRCLE_PULL_REQUEST ]; then
            pr=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")

            base=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" $pr | jq -r '.base.ref')
            echo "PR base branch is ${base}"

            if [[ "$base" =~ integration-.* ]]; then
              VARIANT="$base"
              echo "Variant chosen as ${VARIANT}"
              echo "$VARIANT" > "/tmp/VARIANT"
            fi
          fi
    - validate_gql_schema:
        variant: <<parameters.variant>>

  validate-gql-schema-prod: &validate-gql-schema-prod
    working_directory: ~/project
    executor: golang-only-large
    parameters:
      rover-key-type: *type_str
    steps:
    - cached_checkout
    - enable_private_repo_access
    - validate_gql_schema_prod:
        rover-key-type: <<parameters.rover-key-type>>

  validate-gql-schema-backoffice-prod: *validate-gql-schema-prod


  validate-backoffice-gql-schema:
    working_directory: ~/project
    executor: golang-only-large
    parameters:
      variant:
        type: string
        default: test-eu3
      global_variant:
        type: string
        default: global-test-eu1
    steps:
    - cached_checkout
    - run: *override_gql_variant_by_pr
    - validate_backoffice_gql_schema:
        variant: <<parameters.variant>>
        app-type: dc
    - validate_backoffice_gql_schema:
        variant: << parameters.global_variant >>
        app-type: global

  save-versions-to-ops:
    parameters:
      package_name:
        type: string
        default: '[^:]+'
      packages:
        type: string
        default: ''
      packages_filename:
        type: string
        default: ''
      versions_file:
        type: string
        default: deployment/versions/
      dry_run:
        type: boolean
        default: false
    executor: golang-python
    steps:
    - cached_checkout
    - enable_private_repo_access
    - save_version_to_ops:
        package_name: << parameters.package_name >>
        packages_filename: << parameters.packages_filename >>
        versions_files_path: << parameters.versions_file >>
        packages: << parameters.packages >>
        dry_run: << parameters.dry_run >>

  post-workflow:
    parameters:
      sync_components_to_ops: *type_bool_false
      save_versions_file: *type_bool_false
      slack_channels:
        type: string
        default: ci-notifications
      notify_on:
        type: string
        default: fail
      packages_filename:
        type: string
        default: /tmp/triggered.txt
    executor:
      name: golang-python
      resource_class: medium
    steps:
    - cached_checkout
    - enable_private_repo_access
    - run:
        name: Aggregate coverage files
        command: |
          scripts/tests/create-summary.sh
    - store_artifacts:
        name: Coverage summary
        path: /tmp/coverage/summary
        destination: coverage
    - run:
        name: reconstruct triggered.txt
        command: |
          echo "Reconstruct triggered.txt"
          echo "accelerator-sync" >> << parameters.packages_filename >>
          echo "admission-controller-dal" >> << parameters.packages_filename >>
          echo "admission-controller-ingestor" >> << parameters.packages_filename >>
          echo "agent-gateway" >> << parameters.packages_filename >>
          echo "ai-dal" >> << parameters.packages_filename >>
          echo "artifact-dal" >> << parameters.packages_filename >>
          echo "artifact-fetcher" >> << parameters.packages_filename >>
          echo "artifact-scan-ingestor" >> << parameters.packages_filename >>
          echo "audit-dal" >> << parameters.packages_filename >>
          echo "audit-ingestor" >> << parameters.packages_filename >>
          echo "auth" >> << parameters.packages_filename >>
          echo "auth-msg" >> << parameters.packages_filename >>
          echo "auth-pretoken" >> << parameters.packages_filename >>
          echo "auth0-fetcher" >> << parameters.packages_filename >>
          echo "backoffice-dal" >> << parameters.packages_filename >>
          echo "backoffice-ingestor" >> << parameters.packages_filename >>
          echo "backoffice-request-dal" >> << parameters.packages_filename >>
          echo "backoffice-users-dal" >> << parameters.packages_filename >>
          echo "benchmark-dal" >> << parameters.packages_filename >>
          echo "broker-dal" >> << parameters.packages_filename >>
          echo "bucketanalyzer" >> << parameters.packages_filename >>
          echo "build-all" >> << parameters.packages_filename >>
          echo "build-all-golang" >> << parameters.packages_filename >>
          echo "buildlibs" >> << parameters.packages_filename >>
          echo "builtins-updater" >> << parameters.packages_filename >>
          echo "changeset-ingestor" >> << parameters.packages_filename >>
          echo "cli" >> << parameters.packages_filename >>
          echo "cli-dal" >> << parameters.packages_filename >>
          echo "cloudplatform-dal" >> << parameters.packages_filename >>
          echo "cloudplatform-fetcher" >> << parameters.packages_filename >>
          echo "codeanalyzer" >> << parameters.packages_filename >>
          echo "codeanalyzer-manager" >> << parameters.packages_filename >>
          echo "connector-dal" >> << parameters.packages_filename >>
          echo "connector-operator" >> << parameters.packages_filename >>
          echo "control-engine" >> << parameters.packages_filename >>
          echo "control-engine-operator" >> << parameters.packages_filename >>
          echo "cspm-dal" >> << parameters.packages_filename >>
          echo "cspm-matcher" >> << parameters.packages_filename >>
          echo "cspmlib" >> << parameters.packages_filename >>
          echo "datascan-dal" >> << parameters.packages_filename >>
          echo "datascanlib" >> << parameters.packages_filename >>
          echo "dbanalyzer" >> << parameters.packages_filename >>
          echo "deployment-ingestor" >> << parameters.packages_filename >>
          echo "digital-trust-dal" >> << parameters.packages_filename >>
          echo "digital-trust-serverless" >> << parameters.packages_filename >>
          echo "diskanalyzer" >> << parameters.packages_filename >>
          echo "diskanalyzer-coordinator" >> << parameters.packages_filename >>
          echo "diskanalyzer-init-pull-image" >> << parameters.packages_filename >>
          echo "diskanalyzer-operator" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-alibaba" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-aws" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-azure" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-bootstrap" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-dal" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-gcp" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-helm" >> << parameters.packages_filename >>
          echo "diskanalyzer-provisioner-oci" >> << parameters.packages_filename >>
          echo "diskanalyzer-results-forwarder" >> << parameters.packages_filename >>
          echo "diskanalyzer-scan-results-replay" >> << parameters.packages_filename >>
          echo "diskanalyzer-scanbroker" >> << parameters.packages_filename >>
          echo "diskanalyzer-staticdata-syncer" >> << parameters.packages_filename >>
          echo "diskanalyzerlib" >> << parameters.packages_filename >>
          echo "edr-fetcher" >> << parameters.packages_filename >>
          echo "enricher-dal" >> << parameters.packages_filename >>
          echo "enricher-operator" >> << parameters.packages_filename >>
          echo "enrichment-dal" >> << parameters.packages_filename >>
          echo "fedramp-graphql-blocker" >> << parameters.packages_filename >>
          echo "fetcher-dal" >> << parameters.packages_filename >>
          echo "fetcher-triggers-dal" >> << parameters.packages_filename >>
          echo "filereputation" >> << parameters.packages_filename >>
          echo "filereputation-manager" >> << parameters.packages_filename >>
          echo "fileupload-dal" >> << parameters.packages_filename >>
          echo "fim-ingestor" >> << parameters.packages_filename >>
          echo "fim-updater" >> << parameters.packages_filename >>
          echo "finops-dal" >> << parameters.packages_filename >>
          echo "finops-ingestor" >> << parameters.packages_filename >>
          echo "forensic-correlator" >> << parameters.packages_filename >>
          echo "forensic-cron" >> << parameters.packages_filename >>
          echo "forensic-dal" >> << parameters.packages_filename >>
          echo "forensic-ingestor" >> << parameters.packages_filename >>
          echo "forensicspackage-dal" >> << parameters.packages_filename >>
          echo "forensicspackage-ingestor" >> << parameters.packages_filename >>
          echo "gqlgen" >> << parameters.packages_filename >>
          echo "graph-dal" >> << parameters.packages_filename >>
          echo "graph-enricher" >> << parameters.packages_filename >>
          echo "graph-gc" >> << parameters.packages_filename >>
          echo "graph-ingestor" >> << parameters.packages_filename >>
          echo "hashcracker-ingestor" >> << parameters.packages_filename >>
          echo "host-configuration-dal" >> << parameters.packages_filename >>
          echo "iac-dal" >> << parameters.packages_filename >>
          echo "iam-dal" >> << parameters.packages_filename >>
          echo "image-verifier" >> << parameters.packages_filename >>
          echo "issues-ingestor" >> << parameters.packages_filename >>
          echo "libraryinfo-dal" >> << parameters.packages_filename >>
          echo "log-http-relayer" >> << parameters.packages_filename >>
          echo "nbd-csi-driver" >> << parameters.packages_filename >>
          echo "netreputation" >> << parameters.packages_filename >>
          echo "netscanner-coordinator" >> << parameters.packages_filename >>
          echo "netscanner-results-ingestor" >> << parameters.packages_filename >>
          echo "netscanner-screenshot" >> << parameters.packages_filename >>
          echo "netscanner-serverless" >> << parameters.packages_filename >>
          echo "notification-dal" >> << parameters.packages_filename >>
          echo "notification-ingestor" >> << parameters.packages_filename >>
          echo "object-ingestor" >> << parameters.packages_filename >>
          echo "objectstore-deleteunseen" >> << parameters.packages_filename >>
          echo "objectstore-operator" >> << parameters.packages_filename >>
          echo "okta-fetcher" >> << parameters.packages_filename >>
          echo "ops-accessbot" >> << parameters.packages_filename >>
          echo "ops-dispatcher" >> << parameters.packages_filename >>
          echo "ops-freezebot" >> << parameters.packages_filename >>
          echo "ops-image-replicator" >> << parameters.packages_filename >>
          echo "ops-oncallbot" >> << parameters.packages_filename >>
          echo "ops-rdebot" >> << parameters.packages_filename >>
          echo "ops-registerbot" >> << parameters.packages_filename >>
          echo "ops-releasebot" >> << parameters.packages_filename >>
          echo "ops-vmsbot" >> << parameters.packages_filename >>
          echo "ops-vulnsbot" >> << parameters.packages_filename >>
          echo "outpost-diagnostics" >> << parameters.packages_filename >>
          echo "outpost-files-csi-driver" >> << parameters.packages_filename >>
          echo "outpost-flagsyncer" >> << parameters.packages_filename >>
          echo "outpost-operator" >> << parameters.packages_filename >>
          echo "outpost-state-dal" >> << parameters.packages_filename >>
          echo "outpost-statesyncer" >> << parameters.packages_filename >>
          echo "packageregistry-dal" >> << parameters.packages_filename >>
          echo "packageregistry-fetcher" >> << parameters.packages_filename >>
          echo "policy-dal" >> << parameters.packages_filename >>
          echo "portal-dal" >> << parameters.packages_filename >>
          echo "postgres-updater" >> << parameters.packages_filename >>
          echo "product-dal" >> << parameters.packages_filename >>
          echo "remediation-dal" >> << parameters.packages_filename >>
          echo "remediation-ingestor" >> << parameters.packages_filename >>
          echo "report-dal" >> << parameters.packages_filename >>
          echo "report-operator" >> << parameters.packages_filename >>
          echo "report-run-executor" >> << parameters.packages_filename >>
          echo "resourcescanner-dal" >> << parameters.packages_filename >>
          echo "resourcescanner-ingestor" >> << parameters.packages_filename >>
          echo "rto-manager" >> << parameters.packages_filename >>
          echo "sandboxed-opa-runner" >> << parameters.packages_filename >>
          echo "sbom-dal" >> << parameters.packages_filename >>
          echo "sbom-generator" >> << parameters.packages_filename >>
          echo "scansource-operator" >> << parameters.packages_filename >>
          echo "secrets-dal" >> << parameters.packages_filename >>
          echo "securityinsight-dal" >> << parameters.packages_filename >>
          echo "securitytool-dal" >> << parameters.packages_filename >>
          echo "securitytool-parser" >> << parameters.packages_filename >>
          echo "sensor-dal" >> << parameters.packages_filename >>
          echo "sensor-dal-provisioner" >> << parameters.packages_filename >>
          echo "sensor-ingestor" >> << parameters.packages_filename >>
          echo "sensor-rules-converter" >> << parameters.packages_filename >>
          echo "serverlessanalyzer" >> << parameters.packages_filename >>
          echo "service-catalog-dal" >> << parameters.packages_filename >>
          echo "service-registry" >> << parameters.packages_filename >>
          echo "sync-build-all" >> << parameters.packages_filename >>
          echo "techstack-dal" >> << parameters.packages_filename >>
          echo "tenant-dal" >> << parameters.packages_filename >>
          echo "tenant-deleter" >> << parameters.packages_filename >>
          echo "tenant-migrator" >> << parameters.packages_filename >>
          echo "tenant-monitor" >> << parameters.packages_filename >>
          echo "tenant-operator" >> << parameters.packages_filename >>
          echo "tenant-usagemetrics" >> << parameters.packages_filename >>
          echo "tunnel-auth" >> << parameters.packages_filename >>
          echo "tunnel-server" >> << parameters.packages_filename >>
          echo "user-dal" >> << parameters.packages_filename >>
          echo "userdirectory-dal" >> << parameters.packages_filename >>
          echo "versioncontrol-dal" >> << parameters.packages_filename >>
          echo "versioncontrol-fetcher" >> << parameters.packages_filename >>
          echo "vminsight-ingestor" >> << parameters.packages_filename >>
          echo "vulnerabilities-engine" >> << parameters.packages_filename >>
          echo "web" >> << parameters.packages_filename >>
          echo "webhook-gateway" >> << parameters.packages_filename >>
          echo "wiz-admission-controller" >> << parameters.packages_filename >>
          echo "wiz-broker" >> << parameters.packages_filename >>
          echo "workload-dal" >> << parameters.packages_filename >>
          echo "xml-language-server" >> << parameters.packages_filename >>
    - when:
        condition: << parameters.sync_components_to_ops >>
        steps:
        - sync_components_to_ops
    - when:
        condition: << parameters.save_versions_file >>
        steps:
        - when:
            condition: << pipeline.parameters.gqlgen-schema >>
            steps:
              - update_gql_schema
        - when:
            condition: << pipeline.parameters.gqlgen-backoffice >>
            steps:
              - update_backoffice_gql_schema
        - save_version_to_ops:
            versions_files_path: deployment/versions/
            packages_filename: << parameters.packages_filename >>
    - when:
        condition:
          and:
            - << pipeline.parameters.build-all >>
            - equal: [develop, << pipeline.git.branch >>]
        steps:
          - run:
              name: Save date build_all
              command: date +"%Y-%m-%d" > /tmp/last_succesful_build_all.txt
          - save_cache:
               name: Save current commit file to cache
               key: build-all-{{ .BuildNum }}-{{ epoch }}
               paths:
                 - /tmp/last_succesful_build_all.txt
    - when:
        condition:
          equal: [build_all, << pipeline.git.branch >>]
        steps:
          - cached_checkout_writable:
              remote_name: rw
              cache_version: build-all-v1

          - restore_cache:
               keys:
                 - build-all
          - run:
              name: trigger develop build all
              command: bash ~/project/.circleci/scripts/trigger_build_all.sh
              environment:
                DATE_FILE: "/tmp/last_succesful_build_all.txt"
    - wiz-slack/notify:
        slack_channels: << parameters.slack_channels >>
        notify_on: << parameters.notify_on >>

  test-wizcli:
    parameters:
      cache_key: *build_golang_cache_key
      gocache_legacy_behavior: *type_bool_false
    working_directory: ~/project
    executor: golang-only-xlarge
    environment: *build_golang_env
    steps:
    - when: *disable_s3_cache
    # validate cli/BASE_VERSION file
    - validate_deployed_binary_version:
        binary_package_name: cli
    - setup_remote_docker:
        docker_layer_caching: false
    - write_cache_key_files
    - restore_cache:
        # restore go mod cache
        keys:
          - go-mod-<<parameters.cache_key>>-cli-{{ checksum "/tmp/week" }}-{{ checksum "cli/go.mod" }}
          - go-mod-<<parameters.cache_key>>-cli-{{ checksum "/tmp/week" }}-
    - run:
        name: chown go build cache
        command: sudo mkdir -p /home/circleci/.cache && sudo chown -R circleci:circleci /home/circleci/.cache
    - enable_private_repo_access
    - run:
        name: Go mod download
        command: cd cli && go mod download
    - save_cache:
        name: save cli go mod cache
        key: go-mod-<<parameters.cache_key>>-cli-{{ checksum "/tmp/week" }}-{{ checksum "cli/go.mod" }}
        paths:
          - /tmp/go/pkg/mod
    - run:
        name: 🧪🧪🧪 Run Tests
        environment:
          WIZ_DEV: 1
        command: cd cli && task test
    - store_test_results:
        path: /tmp/unittest-results
    - persist_to_workspace:
        root: .
        paths:
        - cli
        - .circleci/scripts

  build-wizcli:
    parameters:
      cache_key: *build_golang_cache_key
      build_platform: *type_str
      scan_image: *type_bool_true
      gocache_legacy_behavior: *type_bool_false
    working_directory: ~/project
    executor: golang-only-xlarge
    environment: *build_golang_env
    steps:
    - when: *disable_s3_cache
    - setup_remote_docker:
        docker_layer_caching: false
    - cached_checkout
    - write_cache_key_files
    - restore_cache:
        # restore go mod cache
        keys:
          - go-mod-<<parameters.cache_key>>-cli-{{ checksum "/tmp/week" }}-{{ checksum "cli/go.mod" }}
          - go-mod-<<parameters.cache_key>>-cli-{{ checksum "/tmp/week" }}-
    - run:
        name: chown go build cache
        command: sudo mkdir -p /home/circleci/.cache && sudo chown -R circleci:circleci /home/circleci/.cache
    - enable_private_repo_access
    - run:
        name: Go mod download
        command: cd cli && go mod download
    - login_to_ecr
    - run:
        name: Build CLI
        no_output_timeout: 30m
        command: |
          export AWS_REGION
          export AWS_ECR_ACCOUNT_URL

          cd cli
          task clean
          task staticbuild-<<parameters.build_platform>>

          # copy with legacy naming scheme, to currently maintain backward compatibility (TODO: remove this)
          [ ! -f ./wizcli-linux-amd64 ] || cp -vf ./wizcli-linux-amd64 ./wizcli
          [ ! -f ./wizcli-windows-amd64.exe ] || cp -vf ./wizcli-windows-amd64.exe ./wizcli.exe
          [ ! -f ./wizcli-darwin-amd64 ] || cp -vf ./wizcli-darwin-amd64 ./wizcli-mac
    - when:
        condition:
          matches: { pattern: "^linux-.+$", value: << parameters.build_platform >> }
        steps:
          - run:
              name: Build Docker image
              command: |
                cd cli
                task \
                  REPO="${ACR_NAME}.azurecr.io/" \
                  TAG="${CIRCLE_SHA1}" \
                  build-docker-<<parameters.build_platform>>
          - when:
              condition: << parameters.scan_image >>
              steps:
                - scan_image_with_wizcli:
                    image: "${ACR_NAME}.azurecr.io/wizcli:$(cat $(git rev-parse --show-toplevel)/cli/BASE_VERSION)-$(echo << parameters.build_platform >> | sed 's,^linux-,,')-${CIRCLE_SHA1}"
          - run:
              name: Push to intermediate ACR (wizcli)
              command: bash .circleci/scripts/wizcli_upload_to_acr.sh
              environment:
                BUILD_PLATFORM: << parameters.build_platform >>
          - login_to_ecr
          - run:
              name: Push to intermediate ECR (beyond)
              description: push image to beyond ECR (prod)
              command: bash .circleci/scripts/wizcli_upload_to_ecr.sh
              environment:
                BUILD_PLATFORM: << parameters.build_platform >>
    - persist_to_workspace:
        root: .
        paths:
        - cli/wizcli
        - cli/wizcli.exe
        - cli/wizcli-mac
        - cli/wizcli-*

  upload-wizcli-global-s3:
    working_directory: ~/project
    parameters:
      file_name: *type_str
      bucket_name: *type_str
    executor: golang-only
    steps:
    - attach_workspace:
        at: .
    - when:
        condition: true
        steps:
        - aws-cli/configure:
            aws-region: AWS_REGION
        - wizcli-prepare-files-for-upload:
            file_name: << parameters.file_name >>
            gpg_secret_id: devops/certs/wizcli/gpg/latest
        - wizcli-gpg-signing:
            file_name: << parameters.file_name >>
            gpg_secret_id: devops/certs/wizcli/gpg/latest
        - wizcli-upload-files-to-global-bucket:
            file_name: << parameters.file_name >>
            bucket_name: << parameters.bucket_name >>

  upload-wizcli-release-notes-global-s3:
    working_directory: ~/project
    parameters:
      bucket_name:
        type: string
    executor: golang-only
    steps:
      - attach_workspace:
          at: "."
      - when:
          condition: true
          steps:
            - aws-cli/configure:
                aws-region: AWS_REGION
            - run:
                name: Upload Release Notes file to the global bucket
                command: |
                  cd ~/project/cli
                  FILENAME="RELEASE_NOTES"
                  VERSION="$(cat BASE_VERSION)-<< pipeline.git.revision >>"
                  FILENAME_WITH_VERSION="$FILENAME-${VERSION}"
                  if [[ ! -f "$FILENAME" ]]; then
                    echo "Could not find file $FILENAME"
                    exit 1
                  fi
                  echo "Uploading $FILENAME file to global s3 bucket"
                  aws s3 cp \
                    --storage-class STANDARD_IA \
                    "$FILENAME" "s3://<< parameters.bucket_name >>/${FILENAME_WITH_VERSION}"

  upload-iac-rego-lib:
    working_directory: ~/project
    executor:
      name: golang-only
      ecr_url: << parameters.ecr_url >>
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
    steps:
      - cached_checkout
      - enable_private_repo_access
      - aws-cli/configure
      - run:
          name: Upload iac-rego-lib
          command: |
            cd iac-dal
            export ARCHIVE_VERSION="${CIRCLE_SHA1}"
            task upload
            export ARCHIVE_VERSION="${CIRCLE_SHA1:0:7}"
            task upload

  sync-build-all:
    working_directory: ~/project
    executor: base
    steps:
    - cached_checkout_writable:
        remote_name: rw
        cache_version: build-all-v1
    - run:
        name: Push trigger
        command: |
          SOURCE_REF=origin/develop
          SOURCE_BRANCH_NAME=develop
          TARGET_ORIGIN=rw
          TARGET_BRANCH=build_all
          git checkout -b ${TARGET_BRANCH} origin/${TARGET_BRANCH}
          git merge -X theirs ${SOURCE_REF} --no-commit
          git diff --quiet && git diff --staged --quiet || git commit -a -m "Update build_all from develop"
          current_ref=$(git log --format="%H" -n 1 $SOURCE_REF)
          remote_head_ref=$(git ls-remote --refs -q -h ${TARGET_ORIGIN} ${SOURCE_BRANCH_NAME} | awk '{print $1}')
          echo "[INFO] Local ref to merge: ${current_ref}"
          echo "[INFO] Remote HEAD ref of current branch '${SOURCE_BRANCH_NAME}': ${remote_head_ref}"
          if [[ "$current_ref" == "$remote_head_ref" ]]; then
              echo "[INFO] Local ref is the same as remote ref. Forcing target branch content to equal current ref content"
              git checkout ${SOURCE_REF} --theirs -- .
              git diff --quiet && git diff --staged --quiet || git commit --amend --no-edit
          else
              echo "[INFO] Local ref is different than remote ref. Regular merge only"
          fi
          git push $TARGET_ORIGIN $TARGET_BRANCH

  wiz-ci-tag-stable:
    working_directory: ~/project
    executor: golang-python
    parameters:
      alias_tags:
        type: string
    steps:
    - cached_checkout
    - login_to_ecr
    - replicate_image:
        package_name: external/wiz-ci
        tag: << pipeline.parameters.wiz_ci_tag >>
        alias_tags: << parameters.alias_tags >>
        target_azure: false
        target_netscanner_gov: false
        target_auth_gov: false
        target_netscanner_fedtest: false
        target_netscanner_fedstg1: false
        target_netscanner_fedstg2: false
        target_netscanner_fedramp: false
        target_auth_fedtest: false
        target_auth_fedramp: false
        target_auth_fedstg1: false
        target_auth_fedstg2: false


  validate_circle_libs:
    description: Validates all go libs are defined in circleci config.yml anchors
    executor: golang-python
    steps:
    - restore_cache:
        keys:
        - pip-v1-pyyaml-6.0
    - run:
        name: pip install pyaml
        command: |
          mkdir -p $PIP_CACHE_DIR
          pip3 install pyyaml==6.0
        environment:
          PIP_CACHE_DIR: /tmp/pip_cache
    - save_cache:
        key: pip-v1-pyyaml-6.0
        paths:
        - /tmp/pip_cache
    - cached_checkout
    - run:
        name: validate circle-config
        command: cd .circleci/scripts && python3 circle_verify_libs.py

  update-chromium-version:
    working_directory: ~/project
    executor:
      name: golang-only
      ecr_url: << parameters.ecr_url >>
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
    steps:
    - cached_checkout_writable:
        remote_name: rw
    - enable_private_repo_access
    - setup_remote_docker
    - run:
        name: Update chromium version
        command: |
          CHROMIUM_VERSION_FILE=netscanner-screenshot/chromium-version.trigger
          CHROMIUM_VERSION_FROM_FILE="$(cat $CHROMIUM_VERSION_FILE)"
          echo "Current version: $CHROMIUM_VERSION_FROM_FILE"
          CHROMIUM_VERSION=`docker run archlinux:latest /bin/sh -c "pacman -Ssy chromium" | grep extra/chromium | head -n 1 | awk '{print $2}'`
          echo "Version from remote: $CHROMIUM_VERSION"
          if [[ "$CHROMIUM_VERSION" == "$CHROMIUM_VERSION_FROM_FILE" ]]; then
            echo "no need to change version"
            exit 0
          fi
          pushd netscanner-screenshot
          task sanity
          git reset --hard
          popd
          echo $CHROMIUM_VERSION > $CHROMIUM_VERSION_FILE
          git add $CHROMIUM_VERSION_FILE
          echo "Latest version: $(cat $CHROMIUM_VERSION_FILE)"

          # Commit changes only if there are any
          PUSH_MAX_RETRY=8
          if !(git diff --quiet && git diff --staged --quiet); then
            git commit -m "Update chromium version ${CHROMIUM_VERSION}"
            while ! (git push rw ${CIRCLE_BRANCH}); do
              [[ $PUSH_CNT -eq ${PUSH_MAX_RETRY} ]] && echo "Failed!" && exit 1

              sleep $((2**PUSH_CNT))
              ((PUSH_CNT++))

               echo "Trying again. Try #$PUSH_CNT"
               git pull --rebase
            done
          fi

  upload-geoip-db:
    working_directory: ~/project
    executor:
      name: golang-only
      ecr_url: << parameters.ecr_url >>
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
    steps:
      - cached_checkout
      - enable_private_repo_access
      - aws-cli/configure
      - run:
          name: Rebuild GeoIP from maxmind
          command: |
            cd geoiplib
            task export
            export ARCHIVE_VERSION="${CIRCLE_SHA1}"
            task upload

  update-fim-data:
    working_directory: ~/project
    executor:
      name: golang-only-2xlarge-plus
      ecr_url: << parameters.ecr_url >>
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
    steps:
      - cached_checkout
      - enable_private_repo_access
      - aws-cli/configure
      - run:
          name: Download latest FIM data
          command: |
            cd fimlib
            task download-latest
      - run:
          name: Update FIM data
          no_output_timeout: 30m
          command: |
            cd fimlib
            AWS_GLOBAL_REGION=us-east-1 task export -- --timeout 4h
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
      - wiz-slack/notify:
          enable_slack_mention: false
          slack_channels: workload-analysis-ci

  upload-fim-data:
    working_directory: ~/project
    executor:
      name: golang-only
      ecr_url: << parameters.ecr_url >>
    parameters:
      ecr_url:
        type: string
        default: 197171649850.dkr.ecr.us-east-2.amazonaws.com/beyond
    steps:
      - cached_checkout
      - attach_workspace:
          at: ~/project
      - enable_private_repo_access
      - aws-cli/configure
      - run:
          name: Upload FIM data
          command: |
            cd fimlib
            export ARCHIVE_VERSION="${CIRCLE_SHA1}"
            task upload

  forbid-update-gql-schema:
    executor: base
    parameters:
      reason:
        type: string
    steps:
      - run:
          name: 🛑 GQL Schema updates are forbidden
          command: |
            echo "Reason: << parameters.reason >>"
            exit 1

  sync-gql-to-wiz-tf-provider:
      executor: deployer
      parameters:
        dry_run:
          type: boolean
      steps:
      - cached_checkout
      - install_single_ssh_key:
          fingerprint: "94:df:94:9f:3e:c1:1b:d7:c2:3d:aa:04:13:c3:8a:64"
          host: "terraform-provider-wiz"
      - run:
          name: git config url
          command: |
            git config --global url."git@terraform-provider-wiz:wiz-sec-public/private-terraform-provider-wiz".insteadOf https://github.com/wiz-sec-public/private-terraform-provider-wiz
      - run:
         name: "sync gql (dry_run=<< parameters.dry_run >>)"
         command: bash .circleci/scripts/copy-gql-to-wiz-tf-provider.sh
         environment:
           DRY_RUN: << parameters.dry_run >>

  validate-builtin-roles:
    executor: golang-runner-basic
    steps:
    - cached_checkout
    - enable_private_repo_access
    - check_for_rerun_with_ssh
    - run:
        name: Validate builtin roles
        command: bash .circleci/scripts/validate-builtin-roles.sh



  validate-semver-update:
    working_directory: ~/project
    executor:
      name: base
    parameters:
      service:
        type: string
    steps:
    - checkout
    - run:
        # fetch from remote in order to make sure we can perform diff
        name: fetch
        command: git fetch --force origin develop
    - run:
        name:
        command: |
          export SERVICE=<< parameters.service >>
          bash .circleci/scripts/validate-semver-update.sh $SERVICE

  reset-integration-envs:
    description: Resets integration envs in wiz repo
    executor: base
    parameters:
      slack_channel:
        type: string
        default: vashdi-tests
    working_directory: ~/project
    steps:
      - cached_checkout_writable:
          remote_name: rw
      - run:
          name: Validate integration_env
          description: Validate integration_env << pipeline.parameters.integration_env >>
          command: |
            if [[ << pipeline.parameters.integration_env >> == integration* ]]; then
              echo "integration_env << pipeline.parameters.integration_env >> is valid"
            else
              echo "integration_env << pipeline.parameters.integration_env >> is not valid integration env"
              exit 1
            fi
      - run:
          name: Reset integration env in wiz repo
          command: |
            # This section will force us to use integration prefix for the branch name
            integration_env=<< pipeline.parameters.integration_env >>

            # Trim integration from env name
            integration_env_suffix="${integration_env#integration}" 
            echo "integration_env_suffix: $integration_env_suffix"

            # Add integration prefix to env name
            integration_env_new="integration${integration_env_suffix}"
            echo "integration_env_new: $integration_env_new"


            git fetch
            git checkout $integration_env_new
            git reset --hard origin/develop
            echo "" >> Emptyfile
            git add Emptyfile
            git commit -m "reset integration [skip ci]"
            git push -f origin $integration_env_new
workflows:
  unit-tests-and-validations:
    when: << pipeline.parameters.run_trigger_workflow >>
    jobs:

    - validate-gqlgen-runner:
        name: gqlgen-admission-controller-dal
        context: *build_golang_context
        component: admission-controller-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-ai-dal
        context: *build_golang_context
        component: ai-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-artifact-dal
        context: *build_golang_context
        component: artifact-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-audit-dal
        context: *build_golang_context
        component: audit-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-auth
        context: *build_golang_context
        component: auth
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-benchmark-dal
        context: *build_golang_context
        component: benchmark-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-broker-dal
        context: *build_golang_context
        component: broker-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-changeset-ingestor
        context: *build_golang_context
        component: changeset-ingestor
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-cli-dal
        context: *build_golang_context
        component: cli-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-cloudplatform-dal
        context: *build_golang_context
        component: cloudplatform-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-connector-dal
        context: *build_golang_context
        component: connector-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-cspm-dal
        context: *build_golang_context
        component: cspm-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-datascan-dal
        context: *build_golang_context
        component: datascan-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-digital-trust-dal
        context: *build_golang_context
        component: digital-trust-dal
        size: small
        job_timeout: 20m
    - validate-gqlgen-runner:
        name: gqlgen-diskanalyzer-provisioner
        context: *build_golang_context
        component: diskanalyzer-provisioner
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-end2endtests
        context: *build_golang_context
        component: end2endtests
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-enricher-dal
        context: *build_golang_context
        component: enricher-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-fedramp-graphql-blocker
        context: *build_golang_context
        component: fedramp-graphql-blocker
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-fileupload-dal
        context: *build_golang_context
        component: fileupload-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-forensic-dal
        context: *build_golang_context
        component: forensic-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-forensicspackage-dal
        context: *build_golang_context
        component: forensicspackage-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-gqllib
        context: *build_golang_context
        component: gqllib
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-gqllibtest
        context: *build_golang_context
        component: gqllibtest
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-graph-dal
        context: *build_golang_context
        component: graph-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-host-configuration-dal
        context: *build_golang_context
        component: host-configuration-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-iac-dal
        context: *build_golang_context
        component: iac-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-iam-dal
        context: *build_golang_context
        component: iam-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-notification-dal
        context: *build_golang_context
        component: notification-dal
        size: medium
    - validate-gqlgen-runner:
        name: gqlgen-outpost-state-dal
        context: *build_golang_context
        component: outpost-state-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-policy-dal
        context: *build_golang_context
        component: policy-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-portal-dal
        context: *build_golang_context
        component: portal-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-product-dal
        context: *build_golang_context
        component: product-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-querymigrator
        context: *build_golang_context
        component: querymigrator
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-remediation-dal
        context: *build_golang_context
        component: remediation-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-report-dal
        context: *build_golang_context
        component: report-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-resourcescanner-dal
        context: *build_golang_context
        component: resourcescanner-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-sbom-dal
        context: *build_golang_context
        component: sbom-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-securityinsight-dal
        context: *build_golang_context
        component: securityinsight-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-securitytool-dal
        context: *build_golang_context
        component: securitytool-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-sensor-dal
        context: *build_golang_context
        component: sensor-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-service-catalog-dal
        context: *build_golang_context
        component: service-catalog-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-techstack-dal
        context: *build_golang_context
        component: techstack-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-tenant-dal
        context: *build_golang_context
        component: tenant-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-user-dal
        context: *build_golang_context
        component: user-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-userdirectory-dal
        context: *build_golang_context
        component: userdirectory-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-versioncontrol-dal
        context: *build_golang_context
        component: versioncontrol-dal
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-web
        context: *build_golang_context
        component: web
        size: small
    - validate-gqlgen-runner:
        name: gqlgen-workload-dal
        context: *build_golang_context
        component: workload-dal
        size: small

    - upload-iac-rego-lib:
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - GlobalStaticDataContext
    - upload-iac-rego-lib:
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - GlobalStaticDataGovContext
        ecr_url: 399027795803.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-gov
        name: upload-iac-rego-lib-to-gov
    - upload-iac-rego-lib:
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - GlobalStaticDataFedRampContext
        ecr_url: 622857298631.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-fedramp
        name: upload-iac-rego-lib-to-fedramp
    - upload-iac-rego-lib:
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - GlobalStaticDataFedstg1Context
        ecr_url: 623300672468.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-fedtest
        name: upload-iac-rego-lib-to-fedramp-out
    - join:
        name: join-libs
        requires:
          - alibabalib
          - analyticslib
          - annotatelib
          - authlib
          - autogenlib
          - automationlib
          - awslib
          - azurelib
          - backofficelib
          - channellib
          - cicdlib
          - clilib
          - clouderrorlib
          - commonlib
          - configlib
          - connectorstatuslib
          - constantlib
          - containerlib
          - csvlib
          - datalib
          - deploymentlib
          - diskanalyzerprovisionerlib
          - diskscanlib
          - enrichmentslib
          - errorlib
          - fetcherlib
          - filebrokerlib
          - filereputationlib
          - fimlib
          - forensiclib
          - forensicspackagelib
          - gcplib
          - geoiplib
          - gitopslib
          - gqllib
          - graphenricherlib
          - gremlinlib
          - grpclib
          - hostconfiglib
          - httplib
          - httprelaylib
          - iaclib
          - iampermissionslib
          - kicslib
          - kustolib
          - licenseslib
          - loglib
          - messagebrokerlib
          - metricslib
          - nativetypelib
          - netraversalib
          - netreputationlib
          - ocilib
          - oktalib
          - opalib
          - operatorlib
          - ovallib
          - policieslib
          - reflectionlib
          - repolib
          - reportlib
          - resourcescanneroperatorlib
          - sbomlib
          - secretslib
          - staticdatalib
          - stringlib
          - synclib
          - systemactivitylib
          - systemhealthlib
          - techconfiglib
          - tenantconfiglib
          - testlib
          - ticketlib
          - tracelib
          - tunnellib
          - vulnerabilitieslib
          - wizadmissioncontrollerlib
          - wizapiclientlib
          - xccdflib
    - validate_circle_libs:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: alibabalib
        name: alibabalib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: analyticslib
        name: analyticslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: annotatelib
        name: annotatelib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: authlib
        name: authlib
        runner_size: large
        size: xlarge
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: autogenlib
        name: autogenlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: automationlib
        name: automationlib
        size: xlarge
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: awslib
        name: awslib
        runner_size: large
        size: xlarge
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: azurelib
        name: azurelib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: backofficelib
        name: backofficelib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: channellib
        name: channellib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: cicdlib
        name: cicdlib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: clilib
        name: clilib
        runner_size: large
        size: xlarge
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: clouderrorlib
        name: clouderrorlib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: commonlib
        name: commonlib
        runner_size: large
        size: 2xlarge
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: configlib
        name: configlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: connectorstatuslib
        name: connectorstatuslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: constantlib
        name: constantlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: containerlib
        name: containerlib
        size: large
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: csvlib
        name: csvlib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: datalib
        name: datalib
        gocache_disable_for_tests: true
        runner_size: large
        size: 2xlarge
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: deploymentlib
        name: deploymentlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: diskanalyzerprovisionerlib
        name: diskanalyzerprovisionerlib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: diskscanlib
        name: diskscanlib
        runner_size: large
        size: xlarge
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: enrichmentslib
        name: enrichmentslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: errorlib
        name: errorlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: fetcherlib
        name: fetcherlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: filebrokerlib
        name: filebrokerlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: filereputationlib
        name: filereputationlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: fimlib
        name: fimlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: forensiclib
        name: forensiclib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: forensicspackagelib
        name: forensicspackagelib
        size: large
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: gcplib
        name: gcplib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: geoiplib
        name: geoiplib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: gitopslib
        name: gitopslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: gqllib
        name: gqllib
        size: large
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: graphenricherlib
        name: graphenricherlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: gremlinlib
        name: gremlinlib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: grpclib
        name: grpclib
        runner_size: medium
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: hostconfiglib
        name: hostconfiglib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: httplib
        name: httplib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: httprelaylib
        name: httprelaylib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: iaclib
        name: iaclib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: iampermissionslib
        name: iampermissionslib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: kicslib
        name: kicslib
        runner_size: medium
        size: xlarge
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: kustolib
        name: kustolib
        size: large
        test_env: kusto
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: licenseslib
        name: licenseslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: loglib
        name: loglib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: messagebrokerlib
        name: messagebrokerlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: metricslib
        name: metricslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: nativetypelib
        name: nativetypelib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: netraversalib
        name: netraversalib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: netreputationlib
        name: netreputationlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: ocilib
        name: ocilib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: oktalib
        name: oktalib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: opalib
        name: opalib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: operatorlib
        name: operatorlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: ovallib
        name: ovallib
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: policieslib
        name: policieslib
        runner_size: large
        size: xlarge
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: reflectionlib
        name: reflectionlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: repolib
        name: repolib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: reportlib
        name: reportlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: resourcescanneroperatorlib
        name: resourcescanneroperatorlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: sbomlib
        name: sbomlib
        docker_env: true
        size: large
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: secretslib
        name: secretslib
        runner_size: large
        size: xlarge
    - build-golang-runner:
        build_docker_image: false
        context: *build_golang_context
        package_name: staticdatalib
        name: staticdatalib
        runner_size: large
        size: xlarge
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: stringlib
        name: stringlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: synclib
        name: synclib
        size: large
        test_env: dynamo
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: systemactivitylib
        name: systemactivitylib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: systemhealthlib
        name: systemhealthlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: techconfiglib
        name: techconfiglib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: tenantconfiglib
        name: tenantconfiglib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: testlib
        name: testlib
        da_deps: false
        size: large
        xt: machine-amd64
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: ticketlib
        name: ticketlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: tracelib
        name: tracelib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: tunnellib
        name: tunnellib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: vulnerabilitieslib
        name: vulnerabilitieslib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: wizadmissioncontrollerlib
        name: wizadmissioncontrollerlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: wizapiclientlib
        name: wizapiclientlib
        size: large
    - build-golang:
        build_docker_image: false
        context: *build_golang_context
        package_name: xccdflib
        name: xccdflib
        size: large
    - build-node-docker-runner:
        context: *build_node_context
        name: web-build-docker
        package_name: web
    - web-lint-runner:
        name: web-lint
        context: *build_node_context
# REMOVE "-runner" IF YOU WANT TO DISABLE SELF-HOSTED RUNNER
    - web-integration-build-runner:
        context: &build_web_integration_context
          - deploy_key_ops
          - deploy_key_private_forks
          - deploy_key_docs
          - wiz-cache-prod
        name: web-integration-build
    - web-integration-tests-runner:
        context: *build_web_integration_context
        name: web-integration-tests
        requires:
          - web-integration-build
    - test-wizcli:
        context: *build_golang_context
        name: wizcli-test
    - build-wizcli:
        context: *build_golang_context
        name: wizcli-build-<< matrix.build_platform >>
        requires:
          - wizcli-test
        matrix:
          alias: build-wizcli
          parameters:
            build_platform:
              - linux-amd64
              - linux-amd64-no-avx2
              - linux-arm64
              - windows-amd64
              - windows-amd64-no-avx2
              - darwin-amd64
              - darwin-amd64-no-avx2
              - darwin-arm64
    - upload-wizcli-global-s3:
        name: wizcli-upload-<< matrix.file_name >>
        bucket_name: wizcli-global
        context: *build_golang_context
        requires:
          - build-wizcli
        matrix:
          alias: upload-wizcli
          parameters:
            file_name:
              - wizcli
              - wizcli.exe
              - wizcli-mac
              - wizcli-linux-amd64
              - wizcli-linux-amd64-no-avx2
              - wizcli-linux-arm64
              - wizcli-windows-amd64.exe
              - wizcli-windows-amd64-no-avx2.exe
              - wizcli-darwin-amd64
              - wizcli-darwin-amd64-no-avx2
              - wizcli-darwin-arm64
    - upload-wizcli-release-notes-global-s3:
        context: *build_golang_context
        bucket_name: wizcli-global
        requires:
          - build-wizcli
    - build-golang-runner:
        name: accelerator-sync-docker-amd64
        package_name: accelerator-sync
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: accelerator-sync-machine-arm64
        package_name: accelerator-sync
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: accelerator-sync-fips
        extra_target_registries: ""
        package_name: accelerator-sync
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: admission-controller-dal-docker-amd64
        package_name: admission-controller-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        job_timeout: 20m
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: admission-controller-dal-machine-arm64
        package_name: admission-controller-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        job_timeout: 20m
        runner_size: medium
        size: large
        xt: machine-arm64
    - build-golang:
        name: admission-controller-dal-fips
        extra_target_registries: ""
        package_name: admission-controller-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        job_timeout: 20m
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: admission-controller-ingestor-<< matrix.xt >>
        package_name: admission-controller-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: admission-controller-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: admission-controller-ingestor-fips
        extra_target_registries: ""
        package_name: admission-controller-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: agent-gateway-docker-amd64
        package_name: agent-gateway
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        xt: docker-amd64
    - build-golang:
        name: agent-gateway-machine-arm64
        package_name: agent-gateway
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        xt: machine-arm64
    - build-golang:
        name: agent-gateway-fips
        extra_target_registries: ""
        package_name: agent-gateway
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: ai-dal-<< matrix.xt >>
        package_name: ai-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        test_env: dynamo
        tests_need_ecr: true
        matrix:
          alias: ai-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: ai-dal-fips
        extra_target_registries: ""
        package_name: ai-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: dynamo
        tests_need_ecr: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: artifact-dal-docker-amd64
        package_name: artifact-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: artifact-dal-machine-arm64
        package_name: artifact-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: artifact-dal-fips
        extra_target_registries: ""
        package_name: artifact-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: artifact-fetcher-docker-amd64
        package_name: artifact-fetcher
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: artifact-fetcher-machine-arm64
        package_name: artifact-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - build-golang:
        name: artifact-fetcher-fips
        extra_target_registries: ""
        package_name: artifact-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: artifact-scan-ingestor-docker-amd64
        package_name: artifact-scan-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: artifact-scan-ingestor-machine-arm64
        package_name: artifact-scan-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: artifact-scan-ingestor-fips
        extra_target_registries: ""
        package_name: artifact-scan-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: audit-dal-docker-amd64
        package_name: audit-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: audit-dal-machine-arm64
        package_name: audit-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: audit-dal-fips
        extra_target_registries: ""
        package_name: audit-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: audit-ingestor-docker-amd64
        package_name: audit-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: audit-ingestor-machine-arm64
        package_name: audit-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: audit-ingestor-fips
        extra_target_registries: ""
        package_name: audit-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: auth-docker-amd64
        package_name: auth
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: auth-machine-arm64
        package_name: auth
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: auth-fips
        extra_target_registries: ""
        package_name: auth
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: auth-msg-docker-amd64
        package_name: auth-msg
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        push_to_auth_ecr: true
        xt: docker-amd64
    - build-golang:
        name: auth-msg-fips
        extra_target_registries: ""
        package_name: auth-msg
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        push_to_auth_ecr: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: auth-pretoken-docker-amd64
        package_name: auth-pretoken
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        push_to_auth_ecr: true
        runner_size: medium
        size: xlarge
        test_env: dynamo
        xt: docker-amd64
    - build-golang:
        name: auth-pretoken-fips
        extra_target_registries: ""
        package_name: auth-pretoken
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        push_to_auth_ecr: true
        runner_size: medium
        size: xlarge
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: auth0-fetcher-docker-amd64
        package_name: auth0-fetcher
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: auth0-fetcher-machine-arm64
        package_name: auth0-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: auth0-fetcher-fips
        extra_target_registries: ""
        package_name: auth0-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: backoffice-dal-docker-amd64
        package_name: backoffice-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: backoffice-dal-fips
        extra_target_registries: ""
        package_name: backoffice-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: backoffice-ingestor-docker-amd64
        package_name: backoffice-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        xt: docker-amd64
    - build-golang:
        name: backoffice-ingestor-fips
        extra_target_registries: ""
        package_name: backoffice-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: backoffice-request-dal-docker-amd64
        package_name: backoffice-request-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: backoffice-request-dal-machine-arm64
        package_name: backoffice-request-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: backoffice-request-dal-fips
        extra_target_registries: ""
        package_name: backoffice-request-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: backoffice-users-dal-docker-amd64
        package_name: backoffice-users-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: backoffice-users-dal-machine-arm64
        package_name: backoffice-users-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: backoffice-users-dal-fips
        extra_target_registries: ""
        package_name: backoffice-users-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: benchmark-dal-docker-amd64
        package_name: benchmark-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: benchmark-dal-machine-arm64
        package_name: benchmark-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: benchmark-dal-fips
        extra_target_registries: ""
        package_name: benchmark-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: broker-dal-<< matrix.xt >>
        package_name: broker-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: broker-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: broker-dal-fips
        extra_target_registries: ""
        package_name: broker-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: bucketanalyzer-<< matrix.xt >>
        package_name: bucketanalyzer
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        build_docker_image: true
        push_to_acr: true
        size: large
        use_private_repo: true
        matrix:
          alias: bucketanalyzer
          parameters: 
            xt:
              - machine-amd64
              - machine-arm64
    - build-golang:
        name: bucketanalyzer-fips
        extra_target_registries: "azure-registrywizio"
        package_name: bucketanalyzer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        build_docker_image: true
        push_to_acr: true
        size: large
        use_private_repo: true
        xt: machine-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: builtins-updater-<< matrix.xt >>
        package_name: builtins-updater
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        size: xlarge
        test_env: janus
        matrix:
          alias: builtins-updater
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: builtins-updater-fips
        extra_target_registries: ""
        package_name: builtins-updater
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: changeset-ingestor-docker-amd64
        package_name: changeset-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: changeset-ingestor-machine-arm64
        package_name: changeset-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: changeset-ingestor-fips
        extra_target_registries: ""
        package_name: changeset-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: cli-dal-<< matrix.xt >>
        package_name: cli-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: dynamo
        matrix:
          alias: cli-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: cli-dal-fips
        extra_target_registries: ""
        package_name: cli-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: cloudplatform-dal-docker-amd64
        package_name: cloudplatform-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: xlarge
        xt: docker-amd64
    - build-golang:
        name: cloudplatform-dal-machine-arm64
        package_name: cloudplatform-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: xlarge
        xt: machine-arm64
    - build-golang:
        name: cloudplatform-dal-fips
        extra_target_registries: ""
        package_name: cloudplatform-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: cloudplatform-fetcher-docker-amd64
        package_name: cloudplatform-fetcher
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: large
        size: large
        xt: docker-amd64
    - build-golang:
        name: cloudplatform-fetcher-machine-arm64
        package_name: cloudplatform-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: large
        size: large
        xt: machine-arm64
    - build-golang:
        name: cloudplatform-fetcher-fips
        extra_target_registries: ""
        package_name: cloudplatform-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: large
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: codeanalyzer-<< matrix.xt >>
        package_name: codeanalyzer
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: 2xlarge
        matrix:
          alias: codeanalyzer
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: codeanalyzer-fips
        extra_target_registries: ""
        package_name: codeanalyzer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: 2xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: codeanalyzer-manager-<< matrix.xt >>
        package_name: codeanalyzer-manager
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: 2xlarge
        matrix:
          alias: codeanalyzer-manager
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: codeanalyzer-manager-fips
        extra_target_registries: ""
        package_name: codeanalyzer-manager
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: 2xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: connector-dal-docker-amd64
        package_name: connector-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        size: xlarge
        xt: docker-amd64
    - build-golang:
        name: connector-dal-machine-arm64
        package_name: connector-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        size: xlarge
        xt: machine-arm64
    - build-golang:
        name: connector-dal-fips
        extra_target_registries: ""
        package_name: connector-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: connector-operator-<< matrix.xt >>
        package_name: connector-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: connector-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - validate-operator-generated:
        name: validate-gen-connector-operator
        context: 
          - BuildContext
          - deploy_key_private_forks
          - deploy_key_ops
          - wiz-cache-prod
        package_name: connector-operator
        validate_local_chart_generation: false
    - build-golang:
        name: connector-operator-fips
        extra_target_registries: ""
        package_name: connector-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: control-engine-docker-amd64
        package_name: control-engine
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: control-engine-machine-arm64
        package_name: control-engine
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - build-golang:
        name: control-engine-fips
        extra_target_registries: ""
        package_name: control-engine
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: control-engine-operator-docker-amd64
        package_name: control-engine-operator
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: control-engine-operator-machine-arm64
        package_name: control-engine-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - validate-operator-generated:
        name: validate-gen-control-engine-operator
        context: 
          - BuildContext
          - deploy_key_private_forks
          - deploy_key_ops
          - wiz-cache-prod
        package_name: control-engine-operator
        validate_local_chart_generation: false
    - build-golang:
        name: control-engine-operator-fips
        extra_target_registries: ""
        package_name: control-engine-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: cspm-dal-docker-amd64
        package_name: cspm-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: cspm-dal-machine-arm64
        package_name: cspm-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - build-golang:
        name: cspm-dal-fips
        extra_target_registries: ""
        package_name: cspm-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: cspm-matcher-docker-amd64
        package_name: cspm-matcher
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: large
        size: xlarge
        xt: docker-amd64
    - build-golang:
        name: cspm-matcher-machine-arm64
        package_name: cspm-matcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: large
        size: xlarge
        xt: machine-arm64
    - build-golang:
        name: cspm-matcher-fips
        extra_target_registries: ""
        package_name: cspm-matcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: large
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: cspmlib-<< matrix.xt >>
        package_name: cspmlib
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        build_docker_image: false
        push_to_ecr: false
        size: xlarge
        matrix:
          alias: cspmlib
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: cspmlib-fips
        extra_target_registries: ""
        package_name: cspmlib
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        build_docker_image: false
        push_to_ecr: false
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: datascan-dal-<< matrix.xt >>
        package_name: datascan-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: datascan-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: datascan-dal-fips
        extra_target_registries: ""
        package_name: datascan-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: datascanlib-<< matrix.xt >>
        package_name: datascanlib
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        build_docker_image: false
        push_to_ecr: false
        size: 2xlarge
        matrix:
          alias: datascanlib
          parameters: 
            xt:
              - machine-amd64
    - build-golang:
        name: datascanlib-fips
        extra_target_registries: ""
        package_name: datascanlib
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        build_docker_image: false
        push_to_ecr: false
        size: 2xlarge
        xt: machine-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: dbanalyzer-<< matrix.xt >>
        package_name: dbanalyzer
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        build_docker_image: true
        push_to_acr: true
        size: large
        use_private_repo: true
        matrix:
          alias: dbanalyzer
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: dbanalyzer-fips
        extra_target_registries: "azure-registrywizio"
        package_name: dbanalyzer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        build_docker_image: true
        push_to_acr: true
        size: large
        use_private_repo: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: deployment-ingestor-docker-amd64
        package_name: deployment-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: deployment-ingestor-machine-arm64
        package_name: deployment-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: deployment-ingestor-fips
        extra_target_registries: ""
        package_name: deployment-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: digital-trust-dal-docker-amd64
        package_name: digital-trust-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: digital-trust-dal-machine-arm64
        package_name: digital-trust-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: digital-trust-dal-fips
        extra_target_registries: ""
        package_name: digital-trust-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: digital-trust-serverless-<< matrix.xt >>
        package_name: digital-trust-serverless
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        push_to_digital_trust_gov: true
        matrix:
          alias: digital-trust-serverless
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: digital-trust-serverless-fips
        extra_target_registries: ""
        package_name: digital-trust-serverless
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        push_to_digital_trust_gov: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-<< matrix.xt >>
        package_name: diskanalyzer
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        build_docker_image: true
        push_to_acr: true
        size: xlarge
        tests_need_ecr: true
        use_private_repo: true
        matrix:
          alias: diskanalyzer
          parameters: 
            xt:
              - machine-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-fips
        extra_target_registries: "azure-registrywizio"
        package_name: diskanalyzer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        build_docker_image: true
        push_to_acr: true
        size: xlarge
        tests_need_ecr: true
        use_private_repo: true
        xt: machine-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: diskanalyzer-coordinator-docker-amd64
        package_name: diskanalyzer-coordinator
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: large
        size: xlarge
        test_env: dynamo
        xt: docker-amd64
    - build-golang:
        name: diskanalyzer-coordinator-machine-arm64
        package_name: diskanalyzer-coordinator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: large
        size: xlarge
        test_env: dynamo
        xt: machine-arm64
    - build-golang:
        name: diskanalyzer-coordinator-fips
        extra_target_registries: ""
        package_name: diskanalyzer-coordinator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: large
        size: xlarge
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-init-pull-image-<< matrix.xt >>
        package_name: diskanalyzer-init-pull-image
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        build_docker_image: true
        push_to_acr: true
        size: large
        use_private_repo: true
        matrix:
          alias: diskanalyzer-init-pull-image
          parameters: 
            xt:
              - machine-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-init-pull-image-fips
        extra_target_registries: "azure-registrywizio"
        package_name: diskanalyzer-init-pull-image
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        build_docker_image: true
        push_to_acr: true
        size: large
        use_private_repo: true
        xt: machine-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-operator-<< matrix.xt >>
        package_name: diskanalyzer-operator
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        push_to_acr: true
        size: xlarge
        matrix:
          alias: diskanalyzer-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - validate-operator-generated:
        name: validate-gen-diskanalyzer-operator
        context: 
          - BuildContext
          - deploy_key_private_forks
          - deploy_key_ops
          - wiz-cache-prod
        package_name: diskanalyzer-operator
        validate_local_chart_generation: true
    - build-golang:
        name: diskanalyzer-operator-fips
        extra_target_registries: "azure-registrywizio"
        package_name: diskanalyzer-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        push_to_acr: true
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-<< matrix.xt >>
        package_name: diskanalyzer-provisioner
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: diskanalyzer-provisioner
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-alibaba-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-alibaba
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-alibaba
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-alibaba-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-alibaba
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-aws-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-aws
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        job_timeout: 30m
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-aws
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-aws-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-aws
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        job_timeout: 30m
        size: xlarge
        xt: docker-amd64
        docker_layer_caching: true
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-azure-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-azure
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-azure
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-azure-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-azure
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-bootstrap-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-bootstrap
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        job_timeout: 30m
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-bootstrap
          parameters: 
            xt:
              - machine-amd64
    - build-golang:
        name: diskanalyzer-provisioner-bootstrap-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-bootstrap
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        job_timeout: 30m
        size: xlarge
        xt: machine-amd64
        docker_layer_caching: true
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: diskanalyzer-provisioner-dal-docker-amd64
        package_name: diskanalyzer-provisioner-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        xt: docker-amd64
    - build-golang:
        name: diskanalyzer-provisioner-dal-machine-arm64
        package_name: diskanalyzer-provisioner-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        xt: machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-dal-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-gcp-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-gcp
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-gcp
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-gcp-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-gcp
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-helm-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-helm
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-helm
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-helm-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-helm
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        docker_layer_caching: true
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-provisioner-oci-<< matrix.xt >>
        package_name: diskanalyzer-provisioner-oci
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: diskanalyzer-provisioner-oci
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-provisioner-oci-fips
        extra_target_registries: ""
        package_name: diskanalyzer-provisioner-oci
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: diskanalyzer-results-forwarder-docker-amd64
        package_name: diskanalyzer-results-forwarder
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        xt: docker-amd64
    - build-golang:
        name: diskanalyzer-results-forwarder-machine-arm64
        package_name: diskanalyzer-results-forwarder
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        xt: machine-arm64
    - build-golang:
        name: diskanalyzer-results-forwarder-fips
        extra_target_registries: ""
        package_name: diskanalyzer-results-forwarder
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: diskanalyzer-scan-results-replay-docker-amd64
        package_name: diskanalyzer-scan-results-replay
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        size: large
        xt: docker-amd64
    - build-golang:
        name: diskanalyzer-scan-results-replay-machine-arm64
        package_name: diskanalyzer-scan-results-replay
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        size: large
        xt: machine-arm64
    - build-golang:
        name: diskanalyzer-scan-results-replay-fips
        extra_target_registries: ""
        package_name: diskanalyzer-scan-results-replay
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzer-scanbroker-<< matrix.xt >>
        package_name: diskanalyzer-scanbroker
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        push_to_acr: true
        size: xlarge
        matrix:
          alias: diskanalyzer-scanbroker
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: diskanalyzer-scanbroker-fips
        extra_target_registries: "azure-registrywizio"
        package_name: diskanalyzer-scanbroker
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        push_to_acr: true
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: diskanalyzer-staticdata-syncer-docker-amd64
        package_name: diskanalyzer-staticdata-syncer
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        xt: docker-amd64
    - build-golang:
        name: diskanalyzer-staticdata-syncer-machine-arm64
        package_name: diskanalyzer-staticdata-syncer
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        xt: machine-arm64
    - build-golang:
        name: diskanalyzer-staticdata-syncer-fips
        extra_target_registries: ""
        package_name: diskanalyzer-staticdata-syncer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: diskanalyzerlib-<< matrix.xt >>
        package_name: diskanalyzerlib
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        build_docker_image: false
        push_to_ecr: false
        size: 2xlarge
        tests_need_ecr: true
        use_private_repo: true
        matrix:
          alias: diskanalyzerlib
          parameters: 
            xt:
              - machine-amd64
    - build-golang:
        name: diskanalyzerlib-fips
        extra_target_registries: ""
        package_name: diskanalyzerlib
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        build_docker_image: false
        push_to_ecr: false
        size: 2xlarge
        tests_need_ecr: true
        use_private_repo: true
        xt: machine-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: edr-fetcher-<< matrix.xt >>
        package_name: edr-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: dynamo
        matrix:
          alias: edr-fetcher
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: edr-fetcher-fips
        extra_target_registries: ""
        package_name: edr-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: enricher-dal-docker-amd64
        package_name: enricher-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: enricher-dal-machine-arm64
        package_name: enricher-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - build-golang:
        name: enricher-dal-fips
        extra_target_registries: ""
        package_name: enricher-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: enricher-operator-docker-amd64
        package_name: enricher-operator
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: enricher-operator-machine-arm64
        package_name: enricher-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - validate-operator-generated:
        name: validate-gen-enricher-operator
        context: 
          - BuildContext
          - deploy_key_private_forks
          - deploy_key_ops
          - wiz-cache-prod
        package_name: enricher-operator
        validate_local_chart_generation: false
    - build-golang:
        name: enricher-operator-fips
        extra_target_registries: ""
        package_name: enricher-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: enrichment-dal-docker-amd64
        package_name: enrichment-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        test_env: dynamo
        xt: docker-amd64
    - build-golang:
        name: enrichment-dal-machine-arm64
        package_name: enrichment-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        test_env: dynamo
        xt: machine-arm64
    - build-golang:
        name: enrichment-dal-fips
        extra_target_registries: ""
        package_name: enrichment-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: fedramp-graphql-blocker-<< matrix.xt >>
        package_name: fedramp-graphql-blocker
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: fedramp-graphql-blocker
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: fedramp-graphql-blocker-fips
        extra_target_registries: ""
        package_name: fedramp-graphql-blocker
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: fetcher-dal-<< matrix.xt >>
        package_name: fetcher-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: fetcher-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: fetcher-dal-fips
        extra_target_registries: ""
        package_name: fetcher-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: fetcher-triggers-dal-docker-amd64
        package_name: fetcher-triggers-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: docker-amd64
    - build-golang:
        name: fetcher-triggers-dal-machine-arm64
        package_name: fetcher-triggers-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: medium
        size: large
        xt: machine-arm64
    - build-golang:
        name: fetcher-triggers-dal-fips
        extra_target_registries: ""
        package_name: fetcher-triggers-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: medium
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: filereputation-<< matrix.xt >>
        package_name: filereputation
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: filereputation
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: filereputation-fips
        extra_target_registries: ""
        package_name: filereputation
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: filereputation-manager-<< matrix.xt >>
        package_name: filereputation-manager
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: filereputation-manager
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: filereputation-manager-fips
        extra_target_registries: ""
        package_name: filereputation-manager
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: fileupload-dal-docker-amd64
        package_name: fileupload-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: fileupload-dal-machine-arm64
        package_name: fileupload-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: fileupload-dal-fips
        extra_target_registries: ""
        package_name: fileupload-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: fim-ingestor-<< matrix.xt >>
        package_name: fim-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: dynamo
        matrix:
          alias: fim-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: fim-ingestor-fips
        extra_target_registries: ""
        package_name: fim-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: fim-updater-<< matrix.xt >>
        package_name: fim-updater
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: dynamo
        matrix:
          alias: fim-updater
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: fim-updater-fips
        extra_target_registries: ""
        package_name: fim-updater
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: finops-dal-<< matrix.xt >>
        package_name: finops-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        test_env: kusto
        matrix:
          alias: finops-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: finops-dal-fips
        extra_target_registries: ""
        package_name: finops-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: kusto
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: finops-ingestor-<< matrix.xt >>
        package_name: finops-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: finops-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: finops-ingestor-fips
        extra_target_registries: ""
        package_name: finops-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: forensic-correlator-<< matrix.xt >>
        package_name: forensic-correlator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: janus
        matrix:
          alias: forensic-correlator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: forensic-correlator-fips
        extra_target_registries: ""
        package_name: forensic-correlator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: forensic-cron-<< matrix.xt >>
        package_name: forensic-cron
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: janus
        matrix:
          alias: forensic-cron
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: forensic-cron-fips
        extra_target_registries: ""
        package_name: forensic-cron
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: forensic-dal-<< matrix.xt >>
        package_name: forensic-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: kusto
        matrix:
          alias: forensic-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: forensic-dal-fips
        extra_target_registries: ""
        package_name: forensic-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: kusto
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: forensic-ingestor-<< matrix.xt >>
        package_name: forensic-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: forensic-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: forensic-ingestor-fips
        extra_target_registries: ""
        package_name: forensic-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: forensicspackage-dal-<< matrix.xt >>
        package_name: forensicspackage-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: forensicspackage-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: forensicspackage-dal-fips
        extra_target_registries: ""
        package_name: forensicspackage-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: forensicspackage-ingestor-<< matrix.xt >>
        package_name: forensicspackage-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: forensicspackage-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: forensicspackage-ingestor-fips
        extra_target_registries: ""
        package_name: forensicspackage-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: graph-dal-<< matrix.xt >>
        package_name: graph-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        job_timeout: 20m
        size: xlarge
        test_env: janus
        matrix:
          alias: graph-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: graph-dal-fips
        extra_target_registries: ""
        package_name: graph-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        job_timeout: 20m
        size: xlarge
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: graph-enricher-<< matrix.xt >>
        package_name: graph-enricher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: graph-enricher
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: graph-enricher-fips
        extra_target_registries: ""
        package_name: graph-enricher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: graph-gc-<< matrix.xt >>
        package_name: graph-gc
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: graph-gc
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: graph-gc-fips
        extra_target_registries: ""
        package_name: graph-gc
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: graph-ingestor-<< matrix.xt >>
        package_name: graph-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: graph-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: graph-ingestor-fips
        extra_target_registries: ""
        package_name: graph-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: hashcracker-ingestor-<< matrix.xt >>
        package_name: hashcracker-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        test_env: dynamo
        matrix:
          alias: hashcracker-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: hashcracker-ingestor-fips
        extra_target_registries: ""
        package_name: hashcracker-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: host-configuration-dal-<< matrix.xt >>
        package_name: host-configuration-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: host-configuration-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: host-configuration-dal-fips
        extra_target_registries: ""
        package_name: host-configuration-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: iac-dal-<< matrix.xt >>
        package_name: iac-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: iac-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: iac-dal-fips
        extra_target_registries: ""
        package_name: iac-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: iam-dal-<< matrix.xt >>
        package_name: iam-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: iam-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: iam-dal-fips
        extra_target_registries: ""
        package_name: iam-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: image-verifier-docker-amd64
        package_name: image-verifier
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: image-verifier-machine-arm64
        package_name: image-verifier
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: image-verifier-fips
        extra_target_registries: ""
        package_name: image-verifier
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: issues-ingestor-docker-amd64
        package_name: issues-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: issues-ingestor-machine-arm64
        package_name: issues-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: issues-ingestor-fips
        extra_target_registries: ""
        package_name: issues-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: libraryinfo-dal-docker-amd64
        package_name: libraryinfo-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: libraryinfo-dal-machine-arm64
        package_name: libraryinfo-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: libraryinfo-dal-fips
        extra_target_registries: ""
        package_name: libraryinfo-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: log-http-relayer-<< matrix.xt >>
        package_name: log-http-relayer
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        push_to_acr: true
        matrix:
          alias: log-http-relayer
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: log-http-relayer-fips
        extra_target_registries: ""
        package_name: log-http-relayer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        push_to_acr: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: nbd-csi-driver-<< matrix.xt >>
        package_name: nbd-csi-driver
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: false
        push_to_acr: true
        size: large
        matrix:
          alias: nbd-csi-driver
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: nbd-csi-driver-fips
        extra_target_registries: "azure-registrywizio"
        package_name: nbd-csi-driver
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        push_to_acr: true
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: netreputation-docker-amd64
        package_name: netreputation
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: netreputation-machine-arm64
        package_name: netreputation
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: netreputation-fips
        extra_target_registries: ""
        package_name: netreputation
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: netscanner-coordinator-<< matrix.xt >>
        package_name: netscanner-coordinator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: netscanner-coordinator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: netscanner-coordinator-fips
        extra_target_registries: ""
        package_name: netscanner-coordinator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: netscanner-results-ingestor-<< matrix.xt >>
        package_name: netscanner-results-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: netscanner-results-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: netscanner-results-ingestor-fips
        extra_target_registries: ""
        package_name: netscanner-results-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: netscanner-screenshot-<< matrix.xt >>
        package_name: netscanner-screenshot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        install_chromium: true
        push_to_netscanner_ecr: true
        matrix:
          alias: netscanner-screenshot
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: netscanner-screenshot-fips
        extra_target_registries: ""
        package_name: netscanner-screenshot
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        install_chromium: true
        push_to_netscanner_ecr: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: netscanner-serverless-<< matrix.xt >>
        package_name: netscanner-serverless
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        job_timeout: 20m
        push_to_netscanner_ecr: true
        size: large
        matrix:
          alias: netscanner-serverless
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: netscanner-serverless-fips
        extra_target_registries: ""
        package_name: netscanner-serverless
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        job_timeout: 20m
        push_to_netscanner_ecr: true
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: notification-dal-<< matrix.xt >>
        package_name: notification-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: notification-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: notification-dal-fips
        extra_target_registries: ""
        package_name: notification-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: notification-ingestor-<< matrix.xt >>
        package_name: notification-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: notification-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: notification-ingestor-fips
        extra_target_registries: ""
        package_name: notification-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: object-ingestor-<< matrix.xt >>
        package_name: object-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: object-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: object-ingestor-fips
        extra_target_registries: ""
        package_name: object-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: objectstore-deleteunseen-<< matrix.xt >>
        package_name: objectstore-deleteunseen
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: objectstore-deleteunseen
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: objectstore-deleteunseen-fips
        extra_target_registries: ""
        package_name: objectstore-deleteunseen
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: objectstore-operator-<< matrix.xt >>
        package_name: objectstore-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: objectstore-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: objectstore-operator-fips
        extra_target_registries: ""
        package_name: objectstore-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: okta-fetcher-<< matrix.xt >>
        package_name: okta-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: okta-fetcher
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: okta-fetcher-fips
        extra_target_registries: ""
        package_name: okta-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: ops-accessbot-docker-amd64
        package_name: ops-accessbot
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-accessbot-machine-arm64
        package_name: ops-accessbot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang-runner:
        name: ops-dispatcher-docker-amd64
        package_name: ops-dispatcher
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-dispatcher-machine-arm64
        package_name: ops-dispatcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: ops-freezebot-<< matrix.xt >>
        package_name: ops-freezebot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: ops-freezebot
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: ops-image-replicator-<< matrix.xt >>
        package_name: ops-image-replicator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        da_deps: false
        size: large
        matrix:
          alias: ops-image-replicator
          parameters: 
            xt:
              - machine-amd64
              - machine-arm64
    - build-golang-runner:
        name: ops-oncallbot-docker-amd64
        package_name: ops-oncallbot
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-oncallbot-machine-arm64
        package_name: ops-oncallbot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang-runner:
        name: ops-rdebot-docker-amd64
        package_name: ops-rdebot
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-rdebot-machine-arm64
        package_name: ops-rdebot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: ops-registerbot-<< matrix.xt >>
        package_name: ops-registerbot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: ops-registerbot
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang-runner:
        name: ops-releasebot-docker-amd64
        package_name: ops-releasebot
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-releasebot-machine-arm64
        package_name: ops-releasebot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang-runner:
        name: ops-vmsbot-docker-amd64
        package_name: ops-vmsbot
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-vmsbot-machine-arm64
        package_name: ops-vmsbot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang-runner:
        name: ops-vulnsbot-docker-amd64
        package_name: ops-vulnsbot
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: ops-vulnsbot-machine-arm64
        package_name: ops-vulnsbot
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: outpost-diagnostics-<< matrix.xt >>
        package_name: outpost-diagnostics
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: outpost-diagnostics
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: outpost-diagnostics-fips
        extra_target_registries: ""
        package_name: outpost-diagnostics
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: outpost-files-csi-driver-<< matrix.xt >>
        package_name: outpost-files-csi-driver
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        push_to_acr: true
        size: large
        matrix:
          alias: outpost-files-csi-driver
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: outpost-files-csi-driver-fips
        extra_target_registries: "azure-registrywizio"
        package_name: outpost-files-csi-driver
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        push_to_acr: true
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: outpost-flagsyncer-docker-amd64
        package_name: outpost-flagsyncer
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: outpost-flagsyncer-machine-arm64
        package_name: outpost-flagsyncer
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: outpost-flagsyncer-fips
        extra_target_registries: ""
        package_name: outpost-flagsyncer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: outpost-operator-<< matrix.xt >>
        package_name: outpost-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: outpost-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: outpost-operator-fips
        extra_target_registries: ""
        package_name: outpost-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: outpost-state-dal-docker-amd64
        package_name: outpost-state-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: outpost-state-dal-machine-arm64
        package_name: outpost-state-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: outpost-state-dal-fips
        extra_target_registries: ""
        package_name: outpost-state-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: outpost-statesyncer-<< matrix.xt >>
        package_name: outpost-statesyncer
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: outpost-statesyncer
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: outpost-statesyncer-fips
        extra_target_registries: ""
        package_name: outpost-statesyncer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: packageregistry-dal-<< matrix.xt >>
        package_name: packageregistry-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        test_env: dynamo
        matrix:
          alias: packageregistry-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: packageregistry-dal-fips
        extra_target_registries: ""
        package_name: packageregistry-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: packageregistry-fetcher-<< matrix.xt >>
        package_name: packageregistry-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: packageregistry-fetcher
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: packageregistry-fetcher-fips
        extra_target_registries: ""
        package_name: packageregistry-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: policy-dal-docker-amd64
        package_name: policy-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: policy-dal-machine-arm64
        package_name: policy-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: policy-dal-fips
        extra_target_registries: ""
        package_name: policy-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: portal-dal-<< matrix.xt >>
        package_name: portal-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: portal-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: portal-dal-fips
        extra_target_registries: ""
        package_name: portal-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: postgres-updater-<< matrix.xt >>
        package_name: postgres-updater
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        test_env: postgres-updater
        matrix:
          alias: postgres-updater
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: postgres-updater-fips
        extra_target_registries: ""
        package_name: postgres-updater
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: postgres-updater
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: product-dal-<< matrix.xt >>
        package_name: product-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: janus-and-kusto
        matrix:
          alias: product-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: product-dal-fips
        extra_target_registries: ""
        package_name: product-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: janus-and-kusto
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: remediation-dal-<< matrix.xt >>
        package_name: remediation-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: remediation-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: remediation-dal-fips
        extra_target_registries: ""
        package_name: remediation-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: remediation-ingestor-<< matrix.xt >>
        package_name: remediation-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: remediation-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: remediation-ingestor-fips
        extra_target_registries: ""
        package_name: remediation-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: report-dal-<< matrix.xt >>
        package_name: report-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: kusto
        matrix:
          alias: report-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: report-dal-fips
        extra_target_registries: ""
        package_name: report-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: kusto
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: report-operator-<< matrix.xt >>
        package_name: report-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: report-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - validate-operator-generated:
        name: validate-gen-report-operator
        context: 
          - BuildContext
          - deploy_key_private_forks
          - deploy_key_ops
          - wiz-cache-prod
        package_name: report-operator
        validate_local_chart_generation: false
    - build-golang:
        name: report-operator-fips
        extra_target_registries: ""
        package_name: report-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: report-run-executor-<< matrix.xt >>
        package_name: report-run-executor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: report-run-executor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: report-run-executor-fips
        extra_target_registries: ""
        package_name: report-run-executor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: resourcescanner-dal-<< matrix.xt >>
        package_name: resourcescanner-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        test_env: kusto
        matrix:
          alias: resourcescanner-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: resourcescanner-dal-fips
        extra_target_registries: ""
        package_name: resourcescanner-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: kusto
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: resourcescanner-ingestor-docker-amd64
        package_name: resourcescanner-ingestor
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: resourcescanner-ingestor-machine-arm64
        package_name: resourcescanner-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: resourcescanner-ingestor-fips
        extra_target_registries: ""
        package_name: resourcescanner-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: rto-manager-<< matrix.xt >>
        package_name: rto-manager
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: rto-manager
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: rto-manager-fips
        extra_target_registries: ""
        package_name: rto-manager
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sandboxed-opa-runner-<< matrix.xt >>
        package_name: sandboxed-opa-runner
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: sandboxed-opa-runner
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sandboxed-opa-runner-fips
        extra_target_registries: ""
        package_name: sandboxed-opa-runner
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sbom-dal-<< matrix.xt >>
        package_name: sbom-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: sbom-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sbom-dal-fips
        extra_target_registries: ""
        package_name: sbom-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sbom-generator-<< matrix.xt >>
        package_name: sbom-generator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: sbom-generator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sbom-generator-fips
        extra_target_registries: ""
        package_name: sbom-generator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: scansource-operator-<< matrix.xt >>
        package_name: scansource-operator
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        push_to_acr: true
        size: large
        matrix:
          alias: scansource-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - validate-operator-generated:
        name: validate-gen-scansource-operator
        context: 
          - BuildContext
          - deploy_key_private_forks
          - deploy_key_ops
          - wiz-cache-prod
        package_name: scansource-operator
        validate_local_chart_generation: true
    - build-golang:
        name: scansource-operator-fips
        extra_target_registries: "azure-registrywizio"
        package_name: scansource-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        push_to_acr: true
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: secrets-dal-docker-amd64
        package_name: secrets-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: secrets-dal-machine-arm64
        package_name: secrets-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: secrets-dal-fips
        extra_target_registries: ""
        package_name: secrets-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: securityinsight-dal-docker-amd64
        package_name: securityinsight-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: securityinsight-dal-machine-arm64
        package_name: securityinsight-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: securityinsight-dal-fips
        extra_target_registries: ""
        package_name: securityinsight-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: securitytool-dal-<< matrix.xt >>
        package_name: securitytool-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: kusto
        matrix:
          alias: securitytool-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: securitytool-dal-fips
        extra_target_registries: ""
        package_name: securitytool-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: kusto
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: securitytool-parser-<< matrix.xt >>
        package_name: securitytool-parser
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: janus
        matrix:
          alias: securitytool-parser
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: securitytool-parser-fips
        extra_target_registries: ""
        package_name: securitytool-parser
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sensor-dal-<< matrix.xt >>
        package_name: sensor-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: dynamo
        matrix:
          alias: sensor-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sensor-dal-fips
        extra_target_registries: ""
        package_name: sensor-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sensor-dal-provisioner-<< matrix.xt >>
        package_name: sensor-dal-provisioner
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: sensor-dal-provisioner
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sensor-dal-provisioner-fips
        extra_target_registries: ""
        package_name: sensor-dal-provisioner
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sensor-ingestor-<< matrix.xt >>
        package_name: sensor-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: sensor-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sensor-ingestor-fips
        extra_target_registries: ""
        package_name: sensor-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: sensor-rules-converter-<< matrix.xt >>
        package_name: sensor-rules-converter
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        matrix:
          alias: sensor-rules-converter
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: sensor-rules-converter-fips
        extra_target_registries: ""
        package_name: sensor-rules-converter
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: serverlessanalyzer-<< matrix.xt >>
        package_name: serverlessanalyzer
        extra_target_registries: "azure-registrywizio"
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        is_multiarch: true
        build_docker_image: true
        push_to_acr: true
        size: large
        matrix:
          alias: serverlessanalyzer
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: serverlessanalyzer-fips
        extra_target_registries: "azure-registrywizio"
        package_name: serverlessanalyzer
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        - BuildContextDA
        build_docker_image: true
        push_to_acr: true
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: service-catalog-dal-<< matrix.xt >>
        package_name: service-catalog-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        matrix:
          alias: service-catalog-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: service-catalog-dal-fips
        extra_target_registries: ""
        package_name: service-catalog-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: service-registry-<< matrix.xt >>
        package_name: service-registry
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: service-registry
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: service-registry-fips
        extra_target_registries: ""
        package_name: service-registry
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: techstack-dal-docker-amd64
        package_name: techstack-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: techstack-dal-machine-arm64
        package_name: techstack-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: techstack-dal-fips
        extra_target_registries: ""
        package_name: techstack-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: tenant-dal-docker-amd64
        package_name: tenant-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: tenant-dal-machine-arm64
        package_name: tenant-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: tenant-dal-fips
        extra_target_registries: ""
        package_name: tenant-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: tenant-deleter-<< matrix.xt >>
        package_name: tenant-deleter
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: tenant-deleter
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: tenant-deleter-fips
        extra_target_registries: ""
        package_name: tenant-deleter
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: tenant-migrator-<< matrix.xt >>
        package_name: tenant-migrator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: tenant-migrator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: tenant-migrator-fips
        extra_target_registries: ""
        package_name: tenant-migrator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: tenant-monitor-<< matrix.xt >>
        package_name: tenant-monitor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: tenant-monitor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: tenant-monitor-fips
        extra_target_registries: ""
        package_name: tenant-monitor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: tenant-operator-<< matrix.xt >>
        package_name: tenant-operator
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: tenant-operator
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: tenant-operator-fips
        extra_target_registries: ""
        package_name: tenant-operator
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: tenant-usagemetrics-docker-amd64
        package_name: tenant-usagemetrics
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: tenant-usagemetrics-machine-arm64
        package_name: tenant-usagemetrics
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: tenant-usagemetrics-fips
        extra_target_registries: ""
        package_name: tenant-usagemetrics
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: tunnel-auth-docker-amd64
        package_name: tunnel-auth
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: tunnel-auth-machine-arm64
        package_name: tunnel-auth
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: tunnel-auth-fips
        extra_target_registries: ""
        package_name: tunnel-auth
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: tunnel-server-docker-amd64
        package_name: tunnel-server
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: tunnel-server-machine-arm64
        package_name: tunnel-server
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: tunnel-server-fips
        extra_target_registries: ""
        package_name: tunnel-server
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: user-dal-<< matrix.xt >>
        package_name: user-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        test_env: dynamo
        matrix:
          alias: user-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: user-dal-fips
        extra_target_registries: ""
        package_name: user-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang-runner:
        name: userdirectory-dal-docker-amd64
        package_name: userdirectory-dal
        extra_target_registries: ""
        context:
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: docker-amd64
    - build-golang:
        name: userdirectory-dal-machine-arm64
        package_name: userdirectory-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        runner_size: small
        xt: machine-arm64
    - build-golang:
        name: userdirectory-dal-fips
        extra_target_registries: ""
        package_name: userdirectory-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        runner_size: small
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: versioncontrol-dal-<< matrix.xt >>
        package_name: versioncontrol-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: dynamo
        matrix:
          alias: versioncontrol-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: versioncontrol-dal-fips
        extra_target_registries: ""
        package_name: versioncontrol-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: dynamo
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: versioncontrol-fetcher-<< matrix.xt >>
        package_name: versioncontrol-fetcher
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: versioncontrol-fetcher
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: versioncontrol-fetcher-fips
        extra_target_registries: ""
        package_name: versioncontrol-fetcher
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: vminsight-ingestor-<< matrix.xt >>
        package_name: vminsight-ingestor
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: xlarge
        test_env: dynamo
        use_private_repo: true
        matrix:
          alias: vminsight-ingestor
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: vminsight-ingestor-fips
        extra_target_registries: ""
        package_name: vminsight-ingestor
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: xlarge
        test_env: dynamo
        use_private_repo: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: vulnerabilities-engine-<< matrix.xt >>
        package_name: vulnerabilities-engine
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        job_timeout: 20m
        use_private_repo: true
        matrix:
          alias: vulnerabilities-engine
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: vulnerabilities-engine-fips
        extra_target_registries: ""
        package_name: vulnerabilities-engine
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        job_timeout: 20m
        use_private_repo: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: webhook-gateway-<< matrix.xt >>
        package_name: webhook-gateway
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        matrix:
          alias: webhook-gateway
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: webhook-gateway-fips
        extra_target_registries: ""
        package_name: webhook-gateway
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: wiz-admission-controller-<< matrix.xt >>
        package_name: wiz-admission-controller
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        replicate_image: false
        size: xlarge
        matrix:
          alias: wiz-admission-controller
          parameters: 
            xt:
              - machine-amd64
              - machine-arm64
    - build-golang:
        name: wiz-admission-controller-fips
        extra_target_registries: ""
        package_name: wiz-admission-controller
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        replicate_image: false
        size: xlarge
        xt: machine-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: wiz-broker-<< matrix.xt >>
        package_name: wiz-broker
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        replicate_image: false
        size: xlarge
        matrix:
          alias: wiz-broker
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: wiz-broker-fips
        extra_target_registries: ""
        package_name: wiz-broker
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        replicate_image: false
        size: xlarge
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: workload-dal-<< matrix.xt >>
        package_name: workload-dal
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: true
        size: large
        test_env: janus
        matrix:
          alias: workload-dal
          parameters: 
            xt:
              - docker-amd64
              - machine-arm64
    - build-golang:
        name: workload-dal-fips
        extra_target_registries: ""
        package_name: workload-dal
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        size: large
        test_env: janus
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>
    - build-golang:
        name: xml-language-server-<< matrix.xt >>
        package_name: xml-language-server
        extra_target_registries: ""
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        is_multiarch: false
        clone_lemminx_wiz_repo: true
        use_private_repo: true
        matrix:
          alias: xml-language-server
          parameters: 
            xt:
              - docker-amd64
    - build-golang:
        name: xml-language-server-fips
        extra_target_registries: ""
        package_name: xml-language-server
        context:
        - BuildContext
        - deploy_key_ops
        - deploy_key_private_forks
        - wiz-cache-prod
        clone_lemminx_wiz_repo: true
        use_private_repo: true
        xt: docker-amd64
        fips: true
        tag: << pipeline.git.revision >>


    ### ADD MORE JOBS HERE

    - post-workflow:
        name: Post workflow processing
        sync_components_to_ops: false
        save_versions_file: true
        slack_channels: author,ci-notification
        context: *build_golang_context
        # ATTENTION: The following comment line content is sensitive. Do not change it.
        #            See logic in require_all_jobs.py
        # POST_BUILD_REQS_TO_GENERATE
  triggered-update-chromium-version:
    when: << pipeline.parameters.trigger-update-chromium-version >>
    jobs:
    - update-chromium-version:
        name: Update chromium version
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks


  triggered-update-geoip-db:
    when: << pipeline.parameters.trigger-update-geoip-db >>
    jobs:
    - upload-geoip-db:
        name: upload-geoip
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
    - upload-geoip-db:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataGovContext
        name: upload-geoip-to-gov
        ecr_url: 399027795803.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-gov
    - upload-geoip-db:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataFedRampContext
        name: upload-geoip-to-fedramp
        ecr_url: 622857298631.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-fedramp
    - upload-geoip-db:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataFedstg1Context
        ecr_url: 623300672468.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-fedtest
        name: upload-geoip-to-fedramp-out
    - save-versions-to-ops:
        name: save-versions-to-ops
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataContext
        requires:
          - upload-geoip
          - upload-geoip-to-gov
          - upload-geoip-to-fedramp
          - upload-geoip-to-fedramp-out
        package_name: geoIpData
        packages: geoIpData

  triggered-update-fim-data:
    when: << pipeline.parameters.trigger-update-fim-data >>
    jobs:
    - update-fim-data:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataContext
        name: update-fim-data
    - upload-fim-data:
        name: upload-fim-data
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
        requires:
          - update-fim-data
    - upload-fim-data:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataGovContext
        name: upload-fim-data-to-gov
        ecr_url: 399027795803.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-gov
        requires:
          - update-fim-data
    - upload-fim-data:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataFedRampContext
        name: upload-fim-data-to-fedramp
        ecr_url: 622857298631.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-fedramp
        requires:
          - update-fim-data
    - upload-fim-data:
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataFedstg1Context
        ecr_url: 623300672468.dkr.ecr.us-gov-west-1.amazonaws.com/wiz-fedtest
        name: upload-fim-data-to-fedramp-out
        requires:
          - update-fim-data
    - save-versions-to-ops:
        name: save-versions-to-ops
        context:
          - BuildContext
          - deploy_key_ops
          - deploy_key_private_forks
          - GlobalStaticDataContext
        requires:
          - upload-fim-data
          - upload-fim-data-to-gov
          - upload-fim-data-to-fedramp
          - upload-fim-data-to-fedramp-out
        package_name: fimData
        packages: fimData

  sync-build-all:
    when: << pipeline.parameters.sync-build-all >>
    jobs:
    - sync-build-all:
        name: Trigger build all
  # only runs on develop and PR branches
  sync-gql-to-wiz-tf-provider:
    # syncs to wiz-terraform-provider
    when: true
    jobs:
    - sync-gql-to-wiz-tf-provider:
        dry_run: false
  sync-gql-to-wiz-tf-provider-dry-run:
    # simulates sync in PR mode
    when: false
    jobs:
    - sync-gql-to-wiz-tf-provider:
        dry_run: true
  update-wiz-ci-with-stable-tag:
      when: << pipeline.parameters.trigger-update-wiz-ci-tag >>
      jobs:
      - wiz-ci-tag-stable:
          name: Tag wiz-ci image stable
          context:
            - BuildContext
          alias_tags: stable


  trigger-reset-integration-envs:
    when: << pipeline.parameters.reset_integration_envs >>
    jobs:
      - reset-integration-envs:
          context: 
            - BuildContext