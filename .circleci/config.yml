# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

orbs:
  android: circleci/android@1.0.3

workflows:
  main_workflow:
    jobs:
      - checkout_and_build:
          context:
            - my-context

jobs:
  checkout_and_build:
    machine:
      image: machine-ubuntu
    steps:
#      - android/create-avd:
#          avd-name: myavd
#          system-image: system-images;android-29;default;x86
#          install: true
#      - android/start-emulator:
#          avd-name: myavd
#          no-window: true
#          restore-gradle-cache-prefix: v1a
#          wait-for-emulator: true
      # - run:
      #     name: List all APK files
      #     command: |
      #       ls -al onXmaps/build/outputs/apk/backcountry/qa
      #       ls -al onXmaps/build/outputs/apk/hunt/qa
      #       ls -al onXmaps/build/outputs/apk/offroad/qa
#      - run:
#          name: All KVM
#          command: |
#            sudo apt-get update
#            sudo apt-get install cpu-checker
#            egrep -c '(vmx|svm)' /proc/cpuinfo
#            kvm-ok
      - run:
          name: apt-get update
          command: sudo apt-get update
      - run:
          name: Install cpu-checker
          command: sudo apt-get install cpu-checker
#      - run:
#          name: Grep
#          command: egrep -c '(vmx|svm)' /proc/cpuinfo
#      - run:
#          #INFO: Your CPU does not support KVM extensions
#          #KVM acceleration can NOT be used
#          name: KVM ok
##          command: sudo /usr/sbin/kvm-ok
##            sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
##          sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients ubuntu-vm-builder bridge-utils
#          command: |
#            sudo apt-get update
#            sudo depmod
#            sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients virt-manager bridge-utils
#            sudo apt-get install kmod
#            sudo modprobe kvm-intel
      - run:
          name: update apt-get
          command: sudo apt-get update
      - run:
          name: install all
          command: sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients virt-manager bridge-utils
#      - run:
#          name: install kmod
#          command: sudo apt-get install kmod
      - run:
          name: modprobe kvm-intel
          command: sudo modprobe kvm-intel
#      - run:
#          name: Setup dependencies
#          command: echo y | android update sdk --no-ui --all --filter "build-tools-30.0.3"
      - run:
          name: Setup emulator
#          command: sdkmanager "system-images;android-16;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-16;default;armeabi-v7a"    # almost all good except old emulator
#          command: sdkmanager "system-images;android-25;default;armeabi-v7a" && echo "no" | avdmanager -v create avd -n test -k "system-images;android-25;default;armeabi-v7a" -b google_apis/armeabi-v7a -f
#          command: sdkmanager "system-images;android-29;default;x86" && echo "no" | avdmanager create avd -n test -k "system-images;android-29;default;x86"
          command: sdkmanager "system-images;android-29;default;x86_64" && echo "no" | avdmanager create avd -n test -k "system-images;android-29;default;x86_64"
#      - run:
#          name: Accel-check
#          command: emulator -accel-check
      - run:
          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && adb kill-server && adb start-server && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel on
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator -avd arm -no-audio -no-window -gpu off &
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && adb kill-server && adb start-server && emulator -avd test -noaudio -no-boot-anim -no-window -accel on
          background: true
      - run:
          name: Wait emulator
          command: |
            # wait for it to have booted
            circle-android wait-for-boot
            # ./android-wait-for-emulator
            # unlock the emulator screen
            sleep 30
            adb shell input keyevent 82
#            ./gradlew cAT